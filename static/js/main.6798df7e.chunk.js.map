{"version":3,"sources":["mock/fake-traj-manager.ts","mock/data/fleets.ts","mock/data/lift-states.ts","mock/fake-transport.ts","mock/data/door-states.ts","mock/data/dispenser-states.ts","robot-trajectory-manager.ts","app-config.ts","settings.ts","dispenser-state-manager.ts","door-state-manager.ts","fleet-manager.ts","lift-state-manager.ts","components/dispenser-item.tsx","components/dispensers-panel.tsx","components/door-item.tsx","components/doors-panel.tsx","components/disableable-typography.tsx","components/lift-item.tsx","components/lifts-panel.tsx","components/loading-screen.tsx","components/main-menu.tsx","components/omni-panel.tsx","components/omni-panel-view.tsx","components/place-item.tsx","components/places-panel.tsx","components/tab.tsx","components/robot-item-information.tsx","components/robot-item-form.tsx","util/alerts.ts","components/robot-item.tsx","mock/data/places.ts","components/robots-panel.tsx","util/index.ts","components/schedule-visualizer/colors.ts","util/css-utils.ts","components/schedule-visualizer/place.tsx","components/schedule-visualizer/svg-overlay.tsx","components/schedule-visualizer/places-overlay.tsx","util/cublic-spline.ts","components/schedule-visualizer/robot-trajectory.tsx","components/schedule-visualizer/robot-trajectories-overlay.tsx","components/schedule-visualizer/robot.tsx","components/schedule-visualizer/robots-overlay.tsx","components/schedule-visualizer/trajectory-animations.tsx","components/schedule-visualizer/door/door-style.tsx","components/schedule-visualizer/door/door-default.tsx","components/schedule-visualizer/door/door-single-hinge.tsx","components/schedule-visualizer/door/door-double-hinge.tsx","components/schedule-visualizer/door/door-single-slide.tsx","components/schedule-visualizer/door/door-double-slide.tsx","components/schedule-visualizer/door/door.tsx","components/schedule-visualizer/doors-overlay.tsx","components/schedule-visualizer/arrow.tsx","components/schedule-visualizer/lift.tsx","util/angle-calculation.ts","components/schedule-visualizer/lift-overlay.tsx","components/schedule-visualizer/index.tsx","components/settings-drawer.tsx","components/app.tsx","serviceWorker.ts","leaflet/control-positions.ts","index.tsx","mock/data/building-map.ts","mock/data/airport_terminal.png","mock/data/office.png"],"names":["FakeTrajectoryManager","currentTraj","request","param","map_name","traj","trajectories","this","length","JSON","parse","stringify","response","values","conflicts","Error","superFleet","robots","i","push","name","model","mode","RomiCore","MODE_MOVING","location","level_name","x","y","yaw","Math","PI","t","sec","nanosec","battery_percent","path","task_id","fakeLiftStates","Lift1","lift_name","available_floors","available_modes","Uint8Array","MODE_AGV","current_floor","current_mode","destination_floor","door_state","DOOR_OPEN","lift_time","motion_state","MOTION_STOPPED","session_id","Lift2","MODE_FIRE","DOOR_CLOSED","MOTION_UP","Lift3","FakeTransport","topic","options","publish","debug","log","cb","doorStates","Door1","door_name","value","MODE_OPEN","door_time","Door2","MODE_CLOSED","Door3","setInterval","Object","state","liftStates","fleets","MODE_WAITING","MODE_EMERGENCY","fleet","dispenserStates","Dispenser0","time","guid","request_guid_queue","seconds_remaining","Dispenser1","Dispenser2","unsubscribe","service","req","buildingMap","rawKnotsToKnots","rawKnots","knots","rawKnot","poseX","poseY","poseTheta","v","velocityX","velocityY","velocityTheta","pose","theta","velocity","appConfig","TrajectoryAnimation","AnimationSpeed","transportFactory","a","trajectoryManagerFactory","DispenserStateManager","_dispenserStates","transport","subscribe","dispenserState","emit","EventEmitter","DoorStateManager","_doorStates","doorState","FleetManager","_fleets","Array","from","fleetState","LiftStateManager","_liftStates","liftState","defaultSettings","trajectoryAnimation","Follow","trajectoryAnimationSpeed","Normal","SettingsContext","React","createContext","DispenserItem","forwardRef","props","ref","otherProps","classes","useStyles","dispenserModeLabelClasses","useDispenserModeLabelStyles","ExpansionPanel","ExpansionPanelSummary","content","expansionSummaryContent","expandIcon","ExpandMore","Typography","variant","className","IDLE","dispenserLabel","idle","BUSY","busy","OFFLINE","offline","dispenserModeLabelClass","dispenserModeToString","ExpansionPanelDetails","expansionDetail","expansionDetailLine","String","Divider","List","listRoot","dense","map","id","ListItem","key","ListItemText","primary","makeStyles","theme","alignItems","justifyContent","flexFlow","display","padding","spacing","borderRadius","shape","borderStyle","border","width","textAlign","position","overflow","maxHeight","base","borderColor","palette","warning","main","success","error","DispenserPanel","spotlight","dispenserRefs","useRef","useState","expanded","setExpanded","useEffect","current","prev","scrollIntoView","behavior","listItems","keys","index","Boolean","onChange","_","newExpanded","Fragment","DoorItem","door","enableControls","onOpenClick","onCloseClick","useTheme","doorLabel","doorLabelOpen","doorLabelClosed","doorLabelMoving","doorModeLabelClasses","doorModeToString","doorType","DOOR_TYPE_DOUBLE_SLIDING","DOOR_TYPE_DOUBLE_SWING","DOOR_TYPE_DOUBLE_TELESCOPE","DOOR_TYPE_SINGLE_SLIDING","DOOR_TYPE_SINGLE_TELESCOPE","doorTypeToString","door_type","motionDirection","motionDirectionToString","motion_direction","motion_range","v1_x","toFixed","v1_y","ButtonGroup","style","marginTop","fullWidth","disabled","Button","onClick","DoorsPanel","onDoorClick","doorRefs","doorRequestPub","useMemo","createPublisher","requestDoor","requested_mode","requester_id","request_time","Date","doors","color","action","DisableableTypography","clsx","children","LiftItem","lift","enableRequest","onRequest","liftRequestMenuState","setLiftRequestMenuState","renderList","items","val","noPadding","liftFloorLabelUnknown","MOTION_DOWN","liftFloorLabelMoving","liftFloorLabelStopped","liftFloorLabel","ref_x","ref_y","renderAvailableFloors","liftModeToString","renderAvailableModes","DOOR_MOVING","doorStateToString","motionState","motionStateToString","event","anchor","top","clientY","left","clientX","handleRequestClick","Popover","anchorReference","anchorPosition","open","onClose","levels","floor","MenuItem","liftFloorLabelBase","info","liftMode","MODE_HUMAN","LiftsPanel","onLiftRequest","onLiftClick","liftRequestPub","liftRefs","handleLiftRequest","destination","request_type","REQUEST_AGV_MODE","lifts","root","zIndex","drawer","caption","LoadingScreen","Backdrop","undefined","CircularProgress","size","htmlColor","fontSize","getContrastText","MainMenu","button","onDoorsClick","onLiftsClick","onRobotsClick","onPlacesClick","onDispensersClick","container","viewContainer","height","overflowX","viewContainer2","OmniPanel","view","onBack","navigation","backButton","closeButton","Close","child","Slide","direction","in","mountOnEnter","unmountOnExit","appear","OmniPanelView","summary","marginBottom","details","detailLine","PlaceItem","place","level","primaryTypographyProps","secondary","position_tolerance","yaw_tolerance","PlacesPanel","onPlaceClick","placeRefs","flatMap","places","AntTabs","withStyles","borderBottom","indicator","backgroundColor","Tabs","AntTab","createStyles","textTransform","minWidth","fontWeight","typography","fontWeightRegular","marginRight","fontFamily","join","opacity","fontWeightMedium","selected","Tab","disableRipple","TabPanel","other","role","hidden","aria-labelledby","Box","p","RobotInformation","robot","noWrap","RobotLoopForm","requestLoop","fleetName","listOfPlaces","numLoops","setNumLoops","startLocation","setStartLocation","finishLocation","setFinishLocation","numLoopsError","setNumLoopsError","startLocationError","setStartLocationError","finishLocationError","setFinishLocationError","cleanUpError","isFormValid","isValid","form","onSubmit","msg","preventDefault","Swal","fire","title","text","icon","timer","divForm","TextField","e","target","parseInt","placeholder","type","input","label","Autocomplete","getOptionLabel","option","renderInput","params","buttonContainer","flexDirection","paddingTop","paddingLeft","RobotItem","onRobotClick","setValue","magni","SuperFleet","robotStatusLabel","robotMode","MODE_CHARGING","MODE_DOCKING","MODE_GOING_HOME","MODE_IDLE","MODE_PAUSED","robotModeToString","newValue","aria-label","RobotsPanel","robotRefs","loopRequestPub","handleRequestLoop","startLocationPoint","endLocationPoint","robotName","finish_name","num_loops","robot_type","start_name","uuidv4","TransitionProps","toBlobUrl","data","blob","Blob","URL","createObjectURL","_hash","s","encoder","TextEncoder","encode","crypto","subtle","digest","ColorManager","_robotColorCache","_robotKey","Uint16Array","modelHash","hue","nameHash","satlum","saturation","luminance","viewBoxFromLeafletBounds","bounds","lbounds","L","getEast","getWest","getNorth","getSouth","Place","placeMarker","fill","cursor","pointerEvents","SVGOverlay","SVGOverlay_","PlacesOverlay","viewBox","place_","segmentToCoefficientSet","segment","x0","initialPose","x1","finalPose","v0","initialVelocity","v1","finalVelocity","initialTime","dt","finalTime","w0","w1","b","c","d","assignKnotsToSegment","knot","nextKnot","forCoordinate","knotsToSegmentCoefficientsArray","scs","sc","bezierHelper","coeffs","p1","p2","bezierControlPoints","segmentCoefficients","px","py","RobotTrajectory","trajectory","footprint","pathD","bezierSplines","segments","bzCurves","includes","stroke","strokeWidth","strokeLinecap","pathLength","strokeDasharray","strokeDashoffset","RobotTrajectoriesOverlay","trajs","colorManager","trajectoryContext","useContext","RobotTrajectoryContext","Component","robotMarker","robotText","dominantBaseline","textAnchor","Robot","robotColorFromCache","robotColor","setRobotColor","nose","cos","sin","useLayoutEffect","dx","dy","stdDeviation","floodColor","cx","cy","r","filter","y1","x2","y2","substring","RobotsOverlay","robot_","keyframeOffsets","totalDuration","seg","useFillStyles","anim","highlight","useFollowStyles","useOutlineStyles","maskPath","animationDuration","scale","doorStyles","doorMarker","undefinedDoor","doorOpen","doorClose","doorProcess","doorTransparent","DefaultDoor","v2","v2_x","v2_y","SingleHingeDoor","currentMode","hingeX","hingeY","extendX","extendY","getDoorStyle","DoubleHingeDoor","hingeX1","hingeY1","hingeX2","hingeY2","extendX1","extendY1","SingleSlideDoor","DoubleSlideDoor","Door","DOOR_TYPE_UNDEFINED","DOOR_TYPE_SINGLE_SWING","handleClick","DoorsOverlay","doorsState","DoorStateContext","getCurrentDoorMode","doorName","currentDoor","DownArrow","x3","y3","UpArrow","Arrow","points","arrow","Lift","topY","percentage","radians","currentFloor","depth","ref_yaw","transformMiddleCoordsOfRectToSVGBeginPoint","topVerticeX","contextY","contextTopVerticeY","destinationFloor","isInCurrentFloor","liftStyle","MODE_OFFLINE","MODE_UNKNOWN","isModeAGV","isModeHuman","emergency","offLine","liftOnCurrentFloor","humanMode","unknownLift","liftMoving","getLiftStyle","liftMotionText","MOTION_UNKNOWN","getLiftMotionText","liftModeText","getLiftModeText","liftMarker","rx","ry","transform","liftText","LiftsOverlay","liftsState","LiftStateContext","margin","calcMaxBounds","mapFloorLayers","forEach","extend","pad","ScheduleVisualizer","mapRef","mapElement","setMapFloorLayers","mapFloorLayerSort","sort","elevation","curLevelName","setCurLevelName","curMapFloorLayer","setTrajectories","initialBounds","initialLayer","maxBounds","setMaxBounds","robotsInCurLevel","settings","trajAnimDuration","Slow","Fast","TrajectoryComponent","animationScale","None","Fill","pathRef","offsets","pathAnim","cloneNode","classList","add","remove","setAttribute","parentElement","appendChild","animate","offset","duration","easing","withFillAnimation","strokeDash","Number","getAttribute","getTotalLength","max","withFollowAnimation","Outline","parent","mask","document","createElementNS","maskRect","pathStrokeWidth","parseFloat","toString","removeAttribute","withOutlineAnimation","promises","image","images","Promise","res","imageElement","Image","imageUrl","src","addEventListener","listener","removeEventListener","naturalWidth","naturalHeight","y_offset","x_offset","interval","updateTrajectory","trajManager","latestTrajectory","trim","resp","window","clearInterval","sortedMapFloorLayers","leafletElement","setZIndex","attributionControl","crs","Simple","minZoom","maxZoom","zoomDelta","zoomSnap","onbaselayerchange","AttributionControl","prefix","LayersControl","every","floorLayer","BaseLayer","checked","ImageOverlay","url","Overlay","Pane","Provider","levelName","getTrajectory","getConflicts","SettingsDrawer","onSettingsChange","trajAnimsText","slice","Drawer","PaperProps","FormControl","component","FormLabel","legendLabel","RadioGroup","trajGroup","ev","newSettings","FormControlLabel","flexBasis","control","Radio","OmniPanelViewIndex","h6","toolBarTitle","flexGrow","omniPanel","right","bottom","background","default","borderTopLeftRadius","borderTopRightRadius","boxShadow","shadows","topLeftBorder","topRightBorder","ViewMapNode","viewMap","Doors","addChild","Lifts","Robots","Places","Dispensers","makeViewMap","App","setTransport","setBuildingMap","doorStateManager","setDoorStates","setDoors","doorSpotlight","setDoorSpotlight","liftStateManager","setLiftStates","setLifts","liftSpotlight","setLiftSpotlight","fleetManager","setFleets","robotSpotlight","setRobotSpotlight","placeSpotlight","setPlaceSpotlight","dispenserStateManager","setDispenserStates","dispenserSpotlight","setDispenserSpotlight","showOmniPanel","setShowOmniPanel","currentView","setCurrentView","loading","setLoading","showSettings","setShowSettings","settingsStr","localStorage","getItem","loadSettings","setSettings","clearSpotlights","handleClose","then","on","console","once","startSubscription","catch","code","call","result","building_map","off","AppBar","Toolbar","IconButton","Dashboard","Settings","Fade","setItem","saveSettings","hostname","match","origInitControlPos","prototype","_initControlPos","include","_controlCorners","create","_controlContainer","extendControlPositions","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","fs","officePng","readFileSync","__dirname","airportPng","fetch","officePngUrl","officePngResp","arrayBuffer","airportPngUrl","airportPngResp","wall_graph","vertices","edges","encoding","nav_graphs","module","exports"],"mappings":"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","file":"static/js/main.6798df7e.chunk.js","sourcesContent":["import {\n  RobotTrajectoryManager,\n  TimeRequest,\n  TimeResponse,\n  TrajectoryRequest,\n  TrajectoryResponse,\n} from '../robot-trajectory-manager';\nimport trajectories from './data/trajectories.json';\n\nexport default class FakeTrajectoryManager implements RobotTrajectoryManager {\n  async latestTrajectory(request: TrajectoryRequest): Promise<TrajectoryResponse> {\n    if (request.param.map_name === 'L1') {\n      const traj = trajectories[this.currentTraj++];\n      this.currentTraj %= trajectories.length;\n      // \"deep clone\" object\n      return JSON.parse(JSON.stringify(traj)) as any;\n    }\n    return {\n      response: 'trajectory',\n      values: [],\n      conflicts: [],\n    };\n  }\n\n  serverTime(request: TimeRequest): Promise<TimeResponse> {\n    throw new Error('Method not implemented.');\n  }\n\n  private currentTraj = 0;\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\n\nfunction superFleet(): RomiCore.FleetState {\n  const robots: RomiCore.RobotState[] = [];\n  for (let i = 1; i <= 20; i++) {\n    robots.push({\n      name: `Geth${i}`,\n      model: 'TeRmInAtOr',\n      mode: { mode: RomiCore.RobotMode.MODE_MOVING },\n      location: {\n        level_name: 'L1',\n        x: i,\n        y: -2,\n        yaw: ((i * 0.1) % 2) * Math.PI,\n        t: { sec: 0, nanosec: 0 },\n      },\n      battery_percent: 100,\n      path: [],\n      task_id: 'taskA',\n    });\n  }\n\n  return {\n    name: 'SuperFleet',\n    robots: robots,\n  };\n}\n\nexport default function fakeFleets(): RomiCore.FleetState[] {\n  return [\n    {\n      name: 'Fleet1',\n      robots: [\n        {\n          name: 'RobotA',\n          model: 'ModelA',\n          mode: { mode: RomiCore.RobotMode.MODE_MOVING },\n          location: {\n            level_name: 'L1',\n            x: 2,\n            y: -5,\n            yaw: 0,\n            t: { sec: 0, nanosec: 0 },\n          },\n          battery_percent: 100,\n          path: [],\n          task_id: 'taskA',\n        },\n        {\n          name: 'RobotB',\n          model: 'ModelB',\n          mode: { mode: RomiCore.RobotMode.MODE_WAITING },\n          location: {\n            level_name: 'L1',\n            x: 12,\n            y: -10,\n            yaw: 0,\n            t: { sec: 0, nanosec: 0 },\n          },\n          battery_percent: 100,\n          path: [],\n          task_id: 'taskB',\n        },\n      ],\n    },\n    {\n      name: 'Fleet2',\n      robots: [\n        {\n          name: 'RobotC',\n          model: 'ModelC',\n          mode: { mode: RomiCore.RobotMode.MODE_EMERGENCY },\n          location: {\n            level_name: 'L2',\n            x: 4,\n            y: -12,\n            yaw: 0,\n            t: { sec: 0, nanosec: 0 },\n          },\n          battery_percent: 100,\n          path: [],\n          task_id: 'taskC',\n        },\n      ],\n    },\n    superFleet(),\n  ];\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\n\nexport default function fakeLiftStates(): Record<string, RomiCore.LiftState> {\n  return {\n    Lift1: {\n      lift_name: 'Lift1',\n      available_floors: ['L1', 'L2', 'L3'],\n      available_modes: new Uint8Array([RomiCore.LiftState.MODE_AGV]),\n      current_floor: 'L1',\n      current_mode: RomiCore.LiftState.MODE_AGV,\n      destination_floor: 'L1',\n      door_state: RomiCore.LiftState.DOOR_OPEN,\n      lift_time: { sec: 0, nanosec: 0 },\n      motion_state: RomiCore.LiftState.MOTION_STOPPED,\n      session_id: '',\n    },\n    Lift2: {\n      lift_name: 'Lift2',\n      available_floors: ['L1', 'L2', 'L3', 'L4'],\n      available_modes: new Uint8Array([RomiCore.LiftState.MODE_AGV]),\n      current_floor: 'L2',\n      current_mode: RomiCore.LiftState.MODE_FIRE,\n      destination_floor: 'L4',\n      door_state: RomiCore.LiftState.DOOR_CLOSED,\n      lift_time: { sec: 0, nanosec: 0 },\n      motion_state: RomiCore.LiftState.MOTION_UP,\n      session_id: '',\n    },\n    Lift3: {\n      lift_name: 'Lift3',\n      available_floors: ['L1', 'L2', 'L3', 'L4'],\n      available_modes: new Uint8Array([RomiCore.LiftState.MODE_AGV]),\n      current_floor: 'L2',\n      current_mode: RomiCore.LiftState.MODE_AGV,\n      destination_floor: 'L3',\n      door_state: RomiCore.LiftState.DOOR_CLOSED,\n      lift_time: { sec: 0, nanosec: 0 },\n      motion_state: RomiCore.LiftState.MOTION_UP,\n      session_id: '',\n    },\n  };\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport debug from 'debug';\nimport buildingMap from './data/building-map';\nimport fakeDispenserStates from './data/dispenser-states';\nimport fakeDoorStates from './data/door-states';\nimport fakeFleets from './data/fleets';\nimport fakeLiftStates from './data/lift-states';\n\nexport class FakeTransport extends RomiCore.TransportEvents implements RomiCore.Transport {\n  name: string = 'fake';\n\n  createPublisher<Message extends unknown>(\n    topic: RomiCore.RomiTopic<Message>,\n    options?: RomiCore.Options | undefined,\n  ): RomiCore.Publisher<Message> {\n    return {\n      publish: debug.log,\n    };\n  }\n\n  subscribe<Message extends unknown>(\n    topic: RomiCore.RomiTopic<Message>,\n    cb: RomiCore.SubscriptionCb<Message>,\n    options?: RomiCore.Options | undefined,\n  ): RomiCore.Subscription {\n    debug.log('subscribe:', topic);\n    switch (topic) {\n      case RomiCore.doorStates: {\n        const doorStates = fakeDoorStates();\n        setInterval(() => {\n          for (const state of Object.values(doorStates)) {\n            cb(state as Message);\n          }\n        }, 1000);\n        break;\n      }\n      case RomiCore.liftStates: {\n        const liftStates = fakeLiftStates();\n        setInterval(() => {\n          for (const state of Object.values(liftStates)) {\n            cb(state as Message);\n          }\n        }, 1000);\n        break;\n      }\n      case RomiCore.fleetStates: {\n        const fleets = fakeFleets();\n        setInterval(() => {\n          for (const fleet of fleets) {\n            cb(fleet as Message);\n          }\n        }, 1000);\n        break;\n      }\n      case RomiCore.dispenserStates: {\n        const dispenserStates = fakeDispenserStates();\n        setInterval(() => {\n          for (const state of Object.values(dispenserStates)) {\n            cb(state as Message);\n          }\n        }, 1000);\n        break;\n      }\n    }\n\n    // TODO remove the skip validation when the type problem of available_floors is solved\n    if (topic !== RomiCore.liftStates && topic.topic === 'lift_states') {\n      const liftStates = fakeLiftStates();\n      setInterval(() => {\n        for (const state of Object.values(liftStates)) {\n          cb(state as Message);\n        }\n      }, 1000);\n    }\n\n    return {\n      unsubscribe: () => { },\n    };\n  }\n\n  async call<Request extends unknown, Response extends unknown>(\n    service: RomiCore.RomiService<Request, Response>,\n    req: Request,\n  ): Promise<Response> {\n    if (service.service === 'get_building_map') {\n      return new RomiCore.GetBuildingMap_Response(await buildingMap()) as any;\n    }\n    throw new Error('not implemented');\n  }\n\n  createService<Request extends unknown, Response extends unknown>(\n    service: RomiCore.RomiService<Request, Response>,\n  ): RomiCore.Service<Request, Response> {\n    throw new Error('not implemented');\n  }\n\n  destroy(): void { }\n}\n\nexport default FakeTransport;\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\n\nexport default function fakeDoorStates(): Record<string, RomiCore.DoorState> {\n  return {\n    Door1: {\n      door_name: 'coe_door',\n      current_mode: { value: RomiCore.DoorMode.MODE_OPEN },\n      door_time: { sec: 0, nanosec: 0 },\n    },\n    Door2: {\n      door_name: 'hardware_door',\n      current_mode: { value: RomiCore.DoorMode.MODE_CLOSED },\n      door_time: { sec: 0, nanosec: 0 },\n    },\n    Door3: {\n      door_name: 'exit_door',\n      current_mode: { value: RomiCore.DoorMode.MODE_MOVING },\n      door_time: { sec: 0, nanosec: 0 },\n    },\n  };\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\n\nexport default function fakeDispenserStates(): Record<string, RomiCore.DispenserState> {\n  return {\n    Dispenser0: {\n      time: { sec: 0, nanosec: 0 },\n      guid: 'Dispenser0',\n      mode: 0,\n      request_guid_queue: [],\n      seconds_remaining: 0,\n    },\n    Dispenser1: {\n      time: { sec: 0, nanosec: 0},\n      guid: 'Dispenser1',\n      mode: 1,\n      request_guid_queue: ['Request0', 'Request1', 'Request2', 'Request3', \n          'Request4', 'Request5', 'Request6', 'Request7', 'Request8', \n          'Request9'],\n      seconds_remaining: 420,\n    },\n    Dispenser2: {\n      time: { sec: 0, nanosec: 0},\n      guid: 'Dispenser2',\n      mode: 2,\n      request_guid_queue: [],\n      seconds_remaining: 0,\n    },\n  };\n}\n","import { Knot } from './util/cublic-spline';\n\n// RawVelocity received from server is in this format (x, y, theta)\nexport type RawVelocity = [number, number, number];\n\n// RawPose2D received from server is in this format (x, y, theta)\nexport type RawPose2D = [number, number, number];\n\ninterface RawKnot {\n  t: number; // milliseconds\n  v: RawVelocity;\n  x: RawPose2D;\n}\n\nexport interface TrajectoryRequest {\n  request: 'trajectory';\n  param: {\n    map_name: string;\n    duration: number;\n    trim: boolean;\n  };\n}\n\nexport interface TimeRequest {\n  request: 'time';\n  param: {};\n}\n\nexport interface TimeResponse {\n  response: 'time';\n  values: [number];\n}\n\nexport interface Trajectory {\n  id: number;\n  shape: string;\n  dimensions: number;\n  segments: RawKnot[];\n}\n\nexport interface TrajectoryResponse {\n  response: 'trajectory';\n  values: Trajectory[];\n  conflicts: Conflict[];\n}\n\nexport type Conflict = number;\n\nexport interface RobotTrajectoryManager {\n  serverTime(request: TimeRequest): Promise<TimeResponse>;\n  latestTrajectory(request: TrajectoryRequest): Promise<TrajectoryResponse>;\n}\n\ninterface Request {\n  request: string;\n  param: unknown;\n}\n\ninterface Response {\n  response: string;\n  values: unknown;\n}\n\nexport class DefaultTrajectoryManager {\n  static async create(url: string): Promise<DefaultTrajectoryManager> {\n    const ws = new WebSocket(url);\n    await new Promise((res, rej) => {\n      ws.addEventListener('open', function listener() {\n        ws.removeEventListener('open', listener);\n        res();\n      });\n\n      ws.addEventListener('error', function listener(e) {\n        ws.removeEventListener('error', listener);\n        rej(e);\n      });\n    });\n    return new DefaultTrajectoryManager(ws);\n  }\n\n  async latestTrajectory(request: TrajectoryRequest): Promise<TrajectoryResponse> {\n    const event = await this._send(JSON.stringify(request));\n    const resp = JSON.parse(event.data);\n    this._checkResponse(request, resp);\n    if (resp.values === null) {\n      resp.values = [];\n    }\n    return resp as TrajectoryResponse;\n  }\n\n  async serverTime(request: TimeRequest): Promise<TimeResponse> {\n    const event = await this._send(JSON.stringify(request));\n    const resp = JSON.parse(event.data);\n    this._checkResponse(request, resp);\n    return resp as TimeResponse;\n  }\n\n  private _ongoingRequest: Promise<MessageEvent> | null = null;\n\n  private constructor(private _webSocket: WebSocket) {}\n\n  private _listenOnce<K extends keyof WebSocketEventMap>(\n    event: K,\n    listener: (e: WebSocketEventMap[K]) => unknown,\n  ): void {\n    this._webSocket.addEventListener(event, e => {\n      this._webSocket.removeEventListener(event, listener);\n      listener(e);\n    });\n  }\n\n  /**\n   * Sends a message and waits for response from the server.\n   *\n   * @remarks This is an alternative to the old implementation of creating a promise, storing the\n   * resolver and processing each message in an event loop. Advantage of this is that each message\n   * processing logic can be self-contained without a need for a switch or if elses.\n   */\n  private async _send(payload: WebSocketSendParam0T): Promise<MessageEvent> {\n    // response should come in the order that requests are sent, this should allow multiple messages\n    // in-flight while processing the responses in the order they are sent.\n    this._webSocket.send(payload);\n    // waits for the earlier response to be processed.\n    if (this._ongoingRequest) {\n      await this._ongoingRequest;\n    }\n\n    this._ongoingRequest = new Promise(res => {\n      this._listenOnce('message', e => {\n        this._ongoingRequest = null;\n        res(e);\n      });\n    });\n    return this._ongoingRequest;\n  }\n\n  private _checkResponse(request: Request, resp: Response): void {\n    if (request.request !== resp.response) {\n      console.warn('received response for wrong request');\n      throw new Error('received response for wrong request');\n    }\n  }\n}\n\nexport function rawKnotsToKnots(rawKnots: RawKnot[]): Knot[] {\n  const knots: Knot[] = [];\n\n  for (const rawKnot of rawKnots) {\n    const [poseX, poseY, poseTheta] = rawKnot.x;\n    const [velocityX, velocityY, velocityTheta] = rawKnot.v;\n    knots.push({\n      pose: {\n        x: poseX,\n        y: poseY,\n        theta: poseTheta,\n      },\n      velocity: {\n        x: velocityX,\n        y: velocityY,\n        theta: velocityTheta,\n      },\n      time: rawKnot.t,\n    });\n  }\n\n  return knots;\n}\n\ntype WebSocketSendParam0T = Parameters<WebSocket['send']>[0];\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport { SossTransport } from '@osrf/romi-js-soss-transport';\nimport FakeTrajectoryManager from './mock/fake-traj-manager';\nimport { FakeTransport } from './mock/fake-transport';\nimport { DefaultTrajectoryManager, RobotTrajectoryManager } from './robot-trajectory-manager';\n\nexport interface AppConfig {\n  transportFactory: () => Promise<RomiCore.Transport>;\n  trajectoryManagerFactory?: () => Promise<RobotTrajectoryManager>;\n}\n\nexport let appConfig: AppConfig;\n\nif (!process.env.REACT_APP_MOCK && process.env.NODE_ENV !== 'test') {\n  // { user: 'romi-dashboard' } signed with HS256 + secret 'rmf'\n  // prettier-ignore\n  const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoicm9taS1kYXNoYm9hcmQiLCJpYXQiOjE1ODMyODYyMTV9.x9aNjcLujQPHchWEsbrRbvctmnGQtEzw-81X0aPIE-Y'\n\n  appConfig = {\n    transportFactory: () => SossTransport.connect('romi-dashboard', 'wss://localhost:50001', token),\n    trajectoryManagerFactory: () => DefaultTrajectoryManager.create('ws://localhost:8006'),\n  };\n} else {\n  appConfig = {\n    transportFactory: async () => new FakeTransport(),\n    trajectoryManagerFactory: async () => new FakeTrajectoryManager(),\n  };\n}\n\nexport default appConfig;\n","import React from 'react';\n\nexport enum TrajectoryAnimation {\n  None,\n  Fill,\n  Follow,\n  Outline,\n}\n\nexport enum AnimationSpeed {\n  Slow,\n  Normal,\n  Fast,\n}\n\nexport interface Settings {\n  trajectoryAnimation: TrajectoryAnimation;\n  trajectoryAnimationSpeed: AnimationSpeed;\n}\n\nexport function saveSettings(settings: Settings): void {\n  localStorage.setItem('settings', JSON.stringify(settings));\n}\n\nexport function loadSettings(): Settings {\n  const settingsStr = localStorage.getItem('settings');\n  if (!settingsStr) {\n    return defaultSettings();\n  }\n  return JSON.parse(settingsStr);\n}\n\nexport function defaultSettings(): Settings {\n  return {\n    trajectoryAnimation: TrajectoryAnimation.Follow,\n    trajectoryAnimationSpeed: AnimationSpeed.Normal,\n  };\n}\n\nexport const SettingsContext = React.createContext(defaultSettings());\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport EventEmitter from 'eventemitter3';\n\ntype Events = {\n  updated: [];\n};\n\nexport default class DispenserStateManager extends EventEmitter<Events> {\n  dispenserStates(): Record<string, RomiCore.DispenserState> {\n    return { ...this._dispenserStates };\n  }\n\n  startSubscription(transport: RomiCore.Transport) {\n    transport.subscribe(RomiCore.dispenserStates, dispenserState => {\n      this._dispenserStates[dispenserState.guid] = dispenserState;\n      this.emit('updated');\n    });\n  }\n\n  private _dispenserStates: Record<string, RomiCore.DispenserState> = {};\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport EventEmitter from 'eventemitter3';\n\ntype Events = {\n  updated: [];\n};\n\nexport default class DoorStateManager extends EventEmitter<Events> {\n  doorStates(): Record<string, RomiCore.DoorState> {\n    return { ...this._doorStates };\n  }\n\n  startSubscription(transport: RomiCore.Transport) {\n    transport.subscribe(RomiCore.doorStates, doorState => {\n      this._doorStates[doorState.door_name] = doorState;\n      this.emit('updated');\n    });\n  }\n\n  private _doorStates: Record<string, RomiCore.DoorState> = {};\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport EventEmitter from 'eventemitter3';\n\ntype Events = {\n  updated: [];\n}\n\nexport default class FleetManager extends EventEmitter<Events> {\n  fleets(): RomiCore.FleetState[] {\n    return Array.from(Object.values(this._fleets));\n  }\n\n  startSubscription(transport: RomiCore.Transport) {\n    transport.subscribe(RomiCore.fleetStates, fleetState => {\n      this._fleets[fleetState.name] = fleetState;\n      this.emit('updated');\n    });\n  }\n\n  private _fleets: Record<string, RomiCore.FleetState> = {};\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport EventEmitter from 'eventemitter3';\n\ntype Events = {\n  updated: [];\n};\n\nexport default class LiftStateManager extends EventEmitter<Events> {\n  liftStates(): Record<string, RomiCore.LiftState> {\n    return { ...this._liftStates };\n  }\n\n  startSubscription(transport: RomiCore.Transport) {\n    // TODO remove the skip validation when the type problem of available_floors is solved\n    transport.subscribe(RomiCore.skipValidation(RomiCore.liftStates), liftState => {\n      this._liftStates[liftState.lift_name] = liftState;\n      this.emit('updated');\n    });\n  }\n\n  private _liftStates: Record<string, RomiCore.LiftState> = {};\n}\n","import {\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelProps,\n  ExpansionPanelSummary,\n  makeStyles,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n} from '@material-ui/core';\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\nimport { ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\n\nexport interface DispenserItemProps extends Omit<ExpansionPanelProps, 'children'> {\n  dispenserState: Readonly<RomiCore.DispenserState>;\n}\n\nexport const DispenserItem = React.forwardRef(function(\n    props: DispenserItemProps,\n    ref: React.Ref<HTMLElement>,\n): React.ReactElement {\n  const { dispenserState, ...otherProps } = props;\n  const classes = useStyles();\n  const dispenserModeLabelClasses = useDispenserModeLabelStyles();\n\n  function dispenserModeLabelClass(): string {\n    switch (dispenserState.mode) {\n      case RomiCore.DispenserState.IDLE:\n        return `${classes.dispenserLabel} ${dispenserModeLabelClasses.idle}`;\n      case RomiCore.DispenserState.BUSY:\n        return `${classes.dispenserLabel} ${dispenserModeLabelClasses.busy}`;\n      case RomiCore.DispenserState.OFFLINE:\n        return `${classes.dispenserLabel} ${dispenserModeLabelClasses.offline}`;\n      default:\n        return '';\n    }\n  }\n\n  function dispenserRequestQueueId(): React.ReactElement{\n    return (\n      <List className={classes.listRoot} dense={true}>\n        {dispenserState.request_guid_queue.map(id => (\n          <ListItem key={id}>\n            <ListItemText primary={id}></ListItemText>\n          </ListItem>\n        ))}\n      </List>\n    );\n  }\n\n  function dispenserModeToString(): string {\n    switch (dispenserState.mode) {\n      case RomiCore.DispenserState.IDLE:\n        return 'IDLE';\n      case RomiCore.DispenserState.BUSY:\n        return 'ONLINE';\n      case RomiCore.DispenserState.OFFLINE:\n        return 'OFFLINE';\n      default:\n        return 'UNKNOWN';\n    }\n  }\n\n  return (\n    <ExpansionPanel ref={ref} {...otherProps}>\n      <ExpansionPanelSummary\n        classes={{ content: classes.expansionSummaryContent }}\n        expandIcon={<ExpandMoreIcon />}>\n        <Typography variant=\"h5\">{dispenserState.guid}</Typography>\n        <Typography className={dispenserModeLabelClass()} variant='button'>\n          {dispenserModeToString()}\n        </Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails className={classes.expansionDetail}>\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">No. Queued Requests:</Typography>\n          <Typography variant=\"body1\">\n            {String(dispenserState.request_guid_queue.length)}\n          </Typography>\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Request Queue ID:</Typography>\n          {dispenserRequestQueueId()}\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Seconds Remaining:</Typography>\n          <Typography variant=\"body1\">\n            {String(dispenserState.seconds_remaining)}\n          </Typography>\n        </div>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n});\n\nexport default DispenserItem;\n\nconst useStyles = makeStyles(theme => ({\n  expansionSummaryContent: {\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n\n  expansionDetail: {\n    flexFlow: 'column',\n  },\n\n  expansionDetailLine: {\n    display: 'inline-flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0.5),\n  },\n\n  dispenserLabel: {\n    borderRadius: theme.shape.borderRadius,\n    borderStyle: 'solid',\n    border: 2,\n    padding: 5,\n    width: '4rem',\n    textAlign: 'center',\n  },\n\n  listRoot: {\n    position: 'relative',\n    overflow: 'auto',\n    maxHeight: 100,\n  },\n}));\n\nconst useDispenserModeLabelStyles = makeStyles(theme => {\n  const base: CSSProperties = {\n    borderRadius: theme.shape.borderRadius,\n    borderStyle: 'solid',\n    border: 2,\n    padding: 5,\n    width: '4rem',\n    textAlign: 'center',\n  };\n  return {\n    idle: {...base, borderColor: theme.palette.warning.main},\n    busy: {...base, borderColor: theme.palette.success.main},\n    offline: {...base, borderColor: theme.palette.error.main}\n  };\n});\n","import React from 'react';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport DispenserItem from './dispenser-item';\nimport { SpotlightValue } from './spotlight-value';\n\nexport interface DispenserPanelProps {\n  dispenserStates: Readonly<Record<string, RomiCore.DispenserState>>;\n  spotlight?: Readonly<SpotlightValue<string>>;\n}\n\nexport default function DispenserPanel(props: DispenserPanelProps): JSX.Element {\n  const { spotlight } = props;\n  const dispenserRefs = React.useRef<Record<string, HTMLElement | null>>({});\n  const [expanded, setExpanded] = React.useState<Record<string, boolean>>({});\n\n  React.useEffect(() => {\n    if (!spotlight) {\n      return;\n    }\n    const ref = dispenserRefs.current[spotlight.value];\n    if (!ref) {\n      return;\n    }\n    setExpanded(prev => ({\n      ...prev,\n      [spotlight.value]: true,\n    }));\n    ref.scrollIntoView({ behavior: 'smooth' });\n  }, [spotlight]);\n\n  const listItems = Object.keys(props.dispenserStates).map( (guid, index) => {\n    const state = props.dispenserStates[guid];\n    return (\n      <DispenserItem\n        key={state.guid}\n        ref={ref => (dispenserRefs.current[state.guid] = ref)}\n        dispenserState={state}\n        expanded={Boolean(expanded[state.guid])}\n        onChange={(_, newExpanded) =>\n          setExpanded(prev => ({\n            ...prev,\n            [state.guid]: newExpanded,\n          }))\n        }\n      />\n    )\n  });\n\n  return <React.Fragment>{listItems}</React.Fragment>\n\n}\n\n\n","import {\n  Button,\n  ButtonGroup,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelProps,\n  ExpansionPanelSummary,\n  makeStyles,\n  Typography,\n  useTheme,\n} from '@material-ui/core';\nimport { ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\n\nexport interface DoorItemProps extends Omit<ExpansionPanelProps, 'children'> {\n  door: Readonly<RomiCore.Door>;\n  doorState?: Readonly<RomiCore.DoorState>;\n  enableControls?: boolean;\n  onDoorClick?(door: RomiCore.Door): void;\n  onOpenClick?(door: RomiCore.Door): void;\n  onCloseClick?(door: RomiCore.Door): void;\n}\n\nexport const DoorItem = React.forwardRef(function(\n  props: DoorItemProps,\n  ref: React.Ref<HTMLElement>,\n): React.ReactElement {\n  const { door, doorState, enableControls, onOpenClick, onCloseClick, ...otherProps } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n\n  function doorModeLabelClasses(doorState?: RomiCore.DoorState): string {\n    if (!doorState) {\n      return '';\n    }\n    switch (doorState.current_mode.value) {\n      case RomiCore.DoorMode.MODE_OPEN:\n        return `${classes.doorLabel} ${classes.doorLabelOpen}`;\n      case RomiCore.DoorMode.MODE_CLOSED:\n        return `${classes.doorLabel} ${classes.doorLabelClosed}`;\n      case RomiCore.DoorMode.MODE_MOVING:\n        return `${classes.doorLabel} ${classes.doorLabelMoving}`;\n      default:\n        return '';\n    }\n  }\n\n  return (\n    <ExpansionPanel ref={ref} {...otherProps}>\n      <ExpansionPanelSummary\n        classes={{ content: classes.expansionSummaryContent }}\n        expandIcon={<ExpandMoreIcon />}\n      >\n        <Typography variant=\"h5\">{door.name}</Typography>\n        <Typography className={doorModeLabelClasses(doorState)} variant=\"button\">\n          {doorModeToString(doorState)}\n        </Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails className={classes.expansionDetail}>\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Type:</Typography>\n          <Typography variant=\"body1\">{doorTypeToString(door.door_type)}</Typography>\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Motion Direction:</Typography>\n          <Typography variant=\"body1\">{motionDirectionToString(door.motion_direction)}</Typography>\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Motion Range:</Typography>\n          <Typography variant=\"body1\">{door.motion_range}</Typography>\n        </div>\n        <Divider />\n        <div className={classes.expansionDetailLine}>\n          <Typography variant=\"body1\">Location:</Typography>\n          <Typography variant=\"body1\">\n            ({door.v1_x.toFixed(3)}, {door.v1_y.toFixed(3)})\n          </Typography>\n        </div>\n        <ButtonGroup style={{ marginTop: theme.spacing(1) }} fullWidth disabled={!enableControls}>\n          <Button onClick={() => onCloseClick && onCloseClick(door)}>Close</Button>\n          <Button onClick={() => onOpenClick && onOpenClick(door)}>Open</Button>\n        </ButtonGroup>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n});\n\nexport default DoorItem;\n\nconst useStyles = makeStyles(theme => ({\n  expansionSummaryContent: {\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n\n  expansionDetail: {\n    flexFlow: 'column',\n  },\n\n  expansionDetailLine: {\n    display: 'inline-flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0.5),\n  },\n\n  doorLabel: {\n    borderRadius: theme.shape.borderRadius,\n    borderStyle: 'solid',\n    border: 2,\n    padding: 5,\n    width: '4rem',\n    textAlign: 'center',\n  },\n\n  doorLabelOpen: {\n    borderColor: theme.palette.success.main,\n  },\n\n  doorLabelClosed: {\n    borderColor: theme.palette.error.main,\n  },\n\n  doorLabelMoving: {\n    borderColor: theme.palette.warning.main,\n  },\n}));\n\nfunction doorTypeToString(doorType: number): string {\n  switch (doorType) {\n    case RomiCore.Door.DOOR_TYPE_DOUBLE_SLIDING:\n      return 'Double Sliding';\n    case RomiCore.Door.DOOR_TYPE_DOUBLE_SWING:\n      return 'Double Swing';\n    case RomiCore.Door.DOOR_TYPE_DOUBLE_TELESCOPE:\n      return 'Double Telescope';\n    case RomiCore.Door.DOOR_TYPE_SINGLE_SLIDING:\n      return 'Sliding';\n    case RomiCore.Door.DOOR_TYPE_SINGLE_TELESCOPE:\n      return 'Telescope';\n    default:\n      return `Unknown (${doorType})`;\n  }\n}\n\nfunction doorModeToString(doorState?: RomiCore.DoorState): string {\n  if (!doorState) {\n    return 'UNKNOWN';\n  }\n  switch (doorState.current_mode.value) {\n    case RomiCore.DoorMode.MODE_OPEN:\n      return 'OPEN';\n    case RomiCore.DoorMode.MODE_CLOSED:\n      return 'CLOSED';\n    case RomiCore.DoorMode.MODE_MOVING:\n      return 'MOVING';\n    default:\n      return 'UNKNOWN';\n  }\n}\n\nfunction motionDirectionToString(motionDirection: number): string {\n  switch (motionDirection) {\n    case 1:\n      return 'Clockwise';\n    case -1:\n      return 'Anti-Clockwise';\n    default:\n      return `Unknown (${motionDirection})`;\n  }\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\r\nimport React from 'react';\r\nimport DoorItem from './door-item';\r\nimport { SpotlightValue } from './spotlight-value';\r\n\r\nexport interface DoorsPanelProps {\r\n  doors: readonly RomiCore.Door[];\r\n  doorStates: Readonly<Record<string, RomiCore.DoorState>>;\r\n  transport?: Readonly<RomiCore.Transport>;\r\n  spotlight?: Readonly<SpotlightValue<string>>;\r\n  onDoorClick?(door: RomiCore.Door): void;\r\n}\r\n\r\nexport default function DoorsPanel(props: DoorsPanelProps): JSX.Element {\r\n  const { transport, spotlight, onDoorClick } = props;\r\n  const doorRefs = React.useRef<Record<string, HTMLElement | null>>({});\r\n  const [expanded, setExpanded] = React.useState<Record<string, boolean>>({});\r\n  const doorRequestPub = React.useMemo(\r\n    () => (transport ? transport.createPublisher(RomiCore.doorRequests) : null),\r\n    [transport],\r\n  );\r\n\r\n  function requestDoor(door: RomiCore.Door, mode: number): void {\r\n    doorRequestPub?.publish({\r\n      door_name: door.name,\r\n      requested_mode: { value: mode },\r\n      requester_id: transport!.name,\r\n      request_time: RomiCore.toRosTime(new Date()),\r\n    });\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (!spotlight) {\r\n      return;\r\n    }\r\n    const ref = doorRefs.current[spotlight.value];\r\n    if (!ref) {\r\n      return;\r\n    }\r\n    setExpanded(prev => ({\r\n      ...prev,\r\n      [spotlight.value]: true,\r\n    }));\r\n    ref.scrollIntoView({ behavior: 'smooth' });\r\n  }, [spotlight]);\r\n\r\n  const listItems = props.doors.map(door => {\r\n    const doorState = props.doorStates[door.name];\r\n    return (\r\n      <DoorItem\r\n        key={door.name}\r\n        ref={ref => (doorRefs.current[door.name] = ref)}\r\n        door={door}\r\n        doorState={doorState}\r\n        enableControls={Boolean(transport)}\r\n        onOpenClick={() => requestDoor(door, RomiCore.DoorMode.MODE_OPEN)}\r\n        onCloseClick={() => requestDoor(door, RomiCore.DoorMode.MODE_CLOSED)}\r\n        onClick={() => onDoorClick && onDoorClick(door)}\r\n        expanded={Boolean(expanded[door.name])}\r\n        onChange={(_, newExpanded) =>\r\n          setExpanded(prev => ({\r\n            ...prev,\r\n            [door.name]: newExpanded,\r\n          }))\r\n        }\r\n      />\r\n    );\r\n  });\r\n\r\n  return <React.Fragment>{listItems}</React.Fragment>;\r\n}\r\n","import { makeStyles, Typography, TypographyProps } from '@material-ui/core';\nimport clsx from 'clsx';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n  disabled: {\n    color: theme.palette.action.disabled,\n  },\n}));\n\nexport interface DisableableTypography extends TypographyProps {\n  disabled?: boolean;\n}\n\nexport default function DisableableTypography(props: DisableableTypography): React.ReactElement {\n  const { className, disabled, ...otherProps } = props;\n  const classes = useStyles();\n  return (\n    <Typography className={clsx({ [classes.disabled]: disabled, className })} {...otherProps}>\n      {props.children}\n    </Typography>\n  );\n}\n","/**\n * TODO: Show indicator why lift controls are disabled.\n */\n\nimport {\n  Button,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelProps,\n  ExpansionPanelSummary,\n  List,\n  ListItem,\n  makeStyles,\n  MenuItem,\n  Popover,\n  PopoverPosition,\n  Typography,\n  useTheme,\n} from '@material-ui/core';\nimport { ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React, { CSSProperties } from 'react';\nimport DisableableTypography from './disableable-typography';\n\nexport interface LiftItemProps extends Omit<ExpansionPanelProps, 'children'> {\n  lift: Readonly<RomiCore.Lift>;\n  liftState?: Readonly<RomiCore.LiftState>;\n  enableRequest?: boolean;\n  onRequest?(lift: RomiCore.Lift, destination: string): void;\n}\n\nexport const LiftItem = React.forwardRef(function(\n  props: LiftItemProps,\n  ref: React.Ref<HTMLElement>,\n): React.ReactElement {\n  const { lift, liftState, enableRequest, onRequest, ...otherProps } = props;\n  const theme = useTheme();\n  const classes = useStyles();\n\n  const [\n    liftRequestMenuState,\n    setLiftRequestMenuState,\n  ] = React.useState<LiftRequestMenuState | null>(null);\n\n  function renderList(values: string[]): JSX.Element {\n    const items = values.map(val => (\n      <ListItem key={val} dense className={classes.noPadding}>\n        <Typography variant=\"body1\">{val}</Typography>\n      </ListItem>\n    ));\n    return <List>{items}</List>;\n  }\n\n  function renderAvailableFloors(liftState?: RomiCore.LiftState): JSX.Element {\n    if (!liftState) {\n      return (\n        <DisableableTypography disabled={!liftState} variant=\"body1\">\n          Unknown\n        </DisableableTypography>\n      );\n    }\n    return renderList(liftState.available_floors);\n  }\n\n  function renderAvailableModes(liftState?: RomiCore.LiftState): JSX.Element {\n    if (!liftState) {\n      return (\n        <DisableableTypography disabled={!liftState} variant=\"body1\">\n          Unknown\n        </DisableableTypography>\n      );\n    }\n    const modes = Array.from(liftState.available_modes.values());\n    return renderList(modes.map(liftModeToString));\n  }\n\n  function liftFloorLabel(liftState?: RomiCore.LiftState): string {\n    if (!liftState) {\n      return classes.liftFloorLabelUnknown;\n    }\n    switch (liftState.motion_state) {\n      case RomiCore.LiftState.MOTION_UP:\n      case RomiCore.LiftState.MOTION_DOWN:\n        return classes.liftFloorLabelMoving;\n      default:\n        return classes.liftFloorLabelStopped;\n    }\n  }\n\n  function handleRequestClick(event: React.MouseEvent, lift: RomiCore.Lift): void {\n    setLiftRequestMenuState({\n      lift: lift,\n      anchor: { top: event.clientY, left: event.clientX },\n    });\n  }\n\n  return (\n    <React.Fragment>\n      <ExpansionPanel ref={ref} {...otherProps}>\n        <ExpansionPanelSummary\n          classes={{ content: classes.expansionSummaryContent }}\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography variant=\"h5\">{lift.name}</Typography>\n          <Typography className={liftFloorLabel(liftState)} variant=\"button\">\n            {liftState ? liftState.current_floor : 'Unknown'}\n          </Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails className={classes.expansionDetail}>\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Location:</Typography>\n            <Typography variant=\"body1\">\n              {`(${lift.ref_x.toFixed(3)}, ${lift.ref_y.toFixed(3)})`}\n            </Typography>\n          </div>\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Destination Floor:</Typography>\n            <DisableableTypography disabled={!liftState} variant=\"body1\">\n              {liftState ? liftState.destination_floor : 'Unknown'}\n            </DisableableTypography>\n          </div>\n          <Divider />\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Available Floors:</Typography>\n            {renderAvailableFloors(liftState)}\n          </div>\n          <Divider />\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Current Mode:</Typography>\n            <DisableableTypography disabled={!liftState} variant=\"body1\">\n              {liftState ? liftModeToString(liftState.current_mode) : 'Unknown'}\n            </DisableableTypography>\n          </div>\n          <Divider />\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Available Modes:</Typography>\n            {renderAvailableModes(liftState)}\n          </div>\n          <Divider />\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Door State:</Typography>\n            <DisableableTypography disabled={!liftState} variant=\"body1\">\n              {liftState ? doorStateToString(liftState.door_state) : 'Unknown'}\n            </DisableableTypography>\n          </div>\n          <Divider />\n          <div className={classes.expansionDetailLine}>\n            <Typography variant=\"body1\">Motion State:</Typography>\n            <DisableableTypography disabled={!liftState} variant=\"body1\">\n              {liftState ? motionStateToString(liftState.motion_state) : 'Unknown'}\n            </DisableableTypography>\n          </div>\n\n          <Button\n            variant=\"outlined\"\n            style={{ marginTop: theme.spacing(1) }}\n            onClick={event => handleRequestClick(event, lift)}\n            disabled={!enableRequest}\n            fullWidth\n          >\n            Request\n          </Button>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n      {liftRequestMenuState && (\n        <Popover\n          anchorReference=\"anchorPosition\"\n          anchorPosition={liftRequestMenuState?.anchor}\n          open={Boolean(liftRequestMenuState)}\n          onClose={() => setLiftRequestMenuState(null)}\n        >\n          {liftRequestMenuState &&\n            lift.levels.map(floor => (\n              <MenuItem\n                key={floor}\n                onClick={() => {\n                  onRequest && onRequest(lift, floor);\n                  setLiftRequestMenuState(null);\n                }}\n              >\n                {floor}\n              </MenuItem>\n            ))}\n        </Popover>\n      )}\n    </React.Fragment>\n  );\n});\n\ninterface LiftRequestMenuState {\n  lift: RomiCore.Lift;\n  anchor: PopoverPosition;\n}\n\nconst useStyles = makeStyles(theme => {\n  const liftFloorLabelBase: CSSProperties = {\n    borderRadius: theme.shape.borderRadius,\n    borderStyle: 'solid',\n\n    border: 2,\n    padding: 5,\n    width: '4rem',\n    textAlign: 'center',\n  };\n\n  return {\n    expansionSummaryContent: {\n      alignItems: 'center',\n      justifyContent: 'space-between',\n    },\n\n    expansionDetail: {\n      flexFlow: 'column',\n    },\n\n    expansionDetailLine: {\n      display: 'inline-flex',\n      justifyContent: 'space-between',\n      padding: theme.spacing(0.5),\n    },\n\n    noPadding: {\n      padding: 0,\n    },\n\n    liftFloorLabelStopped: {\n      ...liftFloorLabelBase,\n      borderColor: theme.palette.info.main,\n    },\n\n    liftFloorLabelMoving: {\n      ...liftFloorLabelBase,\n      borderColor: theme.palette.warning.main,\n    },\n\n    liftFloorLabelUnknown: {\n      ...liftFloorLabelBase,\n      borderStyle: 'none',\n    },\n  };\n});\n\nfunction liftModeToString(liftMode: number): string {\n  switch (liftMode) {\n    case RomiCore.LiftState.MODE_AGV:\n      return 'AGV';\n    case RomiCore.LiftState.MODE_EMERGENCY:\n      return 'Emergency';\n    case RomiCore.LiftState.MODE_FIRE:\n      return 'Fire';\n    case RomiCore.LiftState.MODE_HUMAN:\n      return 'Human';\n    default:\n      return `Unknown (${liftMode})`;\n  }\n}\n\nfunction doorStateToString(doorState: number): string {\n  switch (doorState) {\n    case RomiCore.LiftState.DOOR_OPEN:\n      return 'Open';\n    case RomiCore.LiftState.DOOR_CLOSED:\n      return 'Closed';\n    case RomiCore.LiftState.DOOR_MOVING:\n      return 'Moving';\n    default:\n      return `Unknown (${doorState})`;\n  }\n}\n\nfunction motionStateToString(motionState: number): string {\n  switch (motionState) {\n    case RomiCore.LiftState.MOTION_DOWN:\n      return 'Down';\n    case RomiCore.LiftState.MOTION_STOPPED:\n      return 'Stopped';\n    case RomiCore.LiftState.MOTION_UP:\n      return 'Up';\n    default:\n      return `Unknown (${motionState})`;\n  }\n}\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\nimport { LiftItem } from './lift-item';\nimport { SpotlightValue } from './spotlight-value';\n\ninterface LiftsPanelProps {\n  lifts: readonly RomiCore.Lift[];\n  liftStates: Readonly<Record<string, RomiCore.LiftState>>;\n  transport?: Readonly<RomiCore.Transport>;\n  spotlight?: Readonly<SpotlightValue<string>>;\n  onLiftRequest?(lift: RomiCore.Lift, destination: string): void;\n  onLiftClick?(lift: RomiCore.Lift): void;\n}\n\nexport default function LiftsPanel(props: LiftsPanelProps): JSX.Element {\n  const { transport, spotlight, onLiftRequest, onLiftClick } = props;\n  const liftRequestPub = React.useMemo(\n    () => (transport ? transport.createPublisher(RomiCore.liftRequests) : null),\n    [transport],\n  );\n  const liftRefs = React.useRef<Record<string, HTMLElement | null>>({});\n  const [expanded, setExpanded] = React.useState<Readonly<Record<string, boolean>>>({});\n\n  function handleLiftRequest(lift: RomiCore.Lift, destination: string): void {\n    liftRequestPub?.publish({\n      lift_name: lift.name,\n      door_state: RomiCore.LiftRequest.DOOR_OPEN,\n      request_type: RomiCore.LiftRequest.REQUEST_AGV_MODE,\n      request_time: RomiCore.toRosTime(new Date()),\n      destination_floor: destination,\n      session_id: transport!.name,\n    });\n    onLiftRequest && onLiftRequest(lift, destination);\n  }\n\n  React.useEffect(() => {\n    if (!spotlight) {\n      return;\n    }\n    const ref = liftRefs.current[spotlight.value];\n    if (!ref) {\n      return;\n    }\n    setExpanded(prev => ({\n      ...prev,\n      [spotlight.value]: true,\n    }));\n    ref.scrollIntoView({ behavior: 'smooth' });\n  }, [spotlight]);\n\n  return (\n    <React.Fragment>\n      {props.lifts.map(lift => {\n        const liftState = props.liftStates[lift.name];\n        return (\n          <LiftItem\n            key={lift.name}\n            lift={lift}\n            ref={ref => (liftRefs.current[lift.name] = ref)}\n            liftState={liftState}\n            enableRequest={Boolean(transport)}\n            onRequest={handleLiftRequest}\n            onClick={() => onLiftClick && onLiftClick(lift)}\n            expanded={Boolean(expanded[lift.name])}\n            onChange={(_, newExpanded) =>\n              setExpanded(prev => ({\n                ...prev,\n                [lift.name]: newExpanded,\n              }))\n            }\n          />\n        );\n      })}\n    </React.Fragment>\n  );\n}\n","import { Backdrop, CircularProgress, makeStyles, Typography, useTheme } from '@material-ui/core';\nimport { Check as SuccessIcon, ErrorOutline as ErrorIcon } from '@material-ui/icons';\nimport React from 'react';\n\nexport interface LoadingScreenProps {\n  caption: string;\n  variant?: 'loading' | 'success' | 'error';\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexFlow: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  caption: {\n    marginTop: theme.spacing(4),\n  },\n}));\n\nexport default function LoadingScreen(props: LoadingScreenProps) {\n  const theme = useTheme();\n  const classes = useStyles();\n  return (\n    <Backdrop className={classes.root} open={true}>\n      {(props.variant === undefined || props.variant === 'loading') && (\n        <CircularProgress size=\"8rem\" />\n      )}\n      {props.variant === 'success' && (\n        <SuccessIcon htmlColor={theme.palette.success.main} style={{ fontSize: '8rem' }} />\n      )}\n      {props.variant === 'error' && <ErrorIcon color=\"error\" style={{ fontSize: '8rem' }} />}\n      <Typography\n        className={classes.caption}\n        variant=\"button\"\n        style={{ color: theme.palette.getContrastText('#000000') }}\n      >\n        {props.caption}\n      </Typography>\n    </Backdrop>\n  );\n}\n","import { Divider, List, ListItem, Typography } from '@material-ui/core';\nimport React from 'react';\n\nexport interface MainMenuProps {\n  onDoorsClick?(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n  onLiftsClick?(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n  onRobotsClick?(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n  onPlacesClick?(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n  onDispensersClick?(event: React.MouseEvent<HTMLDivElement, MouseEvent>): void;\n}\n\nexport default function MainMenu(props: MainMenuProps): React.ReactElement {\n  return (\n    <List>\n      <ListItem button={true} onClick={props.onDoorsClick}>\n        <Typography variant=\"h5\">Doors</Typography>\n      </ListItem>\n\n      <Divider />\n\n      <ListItem button={true} onClick={props.onLiftsClick}>\n        <Typography variant=\"h5\">Lifts</Typography>\n      </ListItem>\n\n      <Divider />\n\n      <ListItem button={true} onClick={props.onRobotsClick}>\n        <Typography variant=\"h5\">Robots</Typography>\n      </ListItem>\n\n      <Divider />\n\n      <ListItem button={true} onClick={props.onPlacesClick}>\n        <Typography variant=\"h5\">Places</Typography>\n      </ListItem>\n\n      <Divider />\n\n      <ListItem button={true} onClick={props.onDispensersClick}>\n        <Typography variant=\"h5\">Dispensers</Typography>\n      </ListItem>\n    </List>\n  );\n}\n","import { Button, ButtonGroup, makeStyles, Slide } from '@material-ui/core';\nimport { Close as CloseIcon, KeyboardBackspace as BackIcon } from '@material-ui/icons';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\nimport { OmniPanelViewProps } from './omni-panel-view';\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    display: 'flex',\n    flexFlow: 'column',\n  },\n\n  viewContainer: {\n    height: '100%',\n    overflowX: 'hidden',\n    position: 'relative',\n  },\n\n  viewContainer2: {\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n  },\n}));\n\nexport interface OmniPanelProps extends React.HTMLAttributes<HTMLDivElement> {\n  view: number;\n  transport?: Readonly<RomiCore.Transport>;\n  classes?: {\n    navigation?: string;\n    backButton?: string;\n    closeButton?: string;\n  };\n  onBack?: (current: number) => void;\n  onClose?: () => void;\n  children?: React.ReactElement<OmniPanelViewProps>[];\n}\n\nexport const OmniPanel = React.forwardRef(function(\n  props: OmniPanelProps,\n  ref: React.Ref<HTMLDivElement>,\n): React.ReactElement {\n  const { view, classes: innerClasses, onBack, onClose, children, ...otherProps } = props;\n  const classes = useStyles();\n\n  const className = (() =>\n    `${otherProps.className || ''} ${classes.container} ${props.className}`)();\n\n  function handleBackClick() {\n    props.onBack && props.onBack(props.view);\n  }\n\n  function handleCloseClick() {\n    props.onClose && props.onClose();\n  }\n\n  return (\n    <div {...otherProps} ref={ref} className={className}>\n      <ButtonGroup className={props.classes?.navigation} variant=\"text\" fullWidth>\n        <Button className={props.classes?.backButton} size=\"large\" onClick={handleBackClick}>\n          <BackIcon />\n        </Button>\n        <Button className={props.classes?.closeButton} size=\"large\" onClick={handleCloseClick}>\n          <CloseIcon />\n        </Button>\n      </ButtonGroup>\n      <div className={classes.viewContainer}>\n        {props.children?.map(child => (\n          <Slide\n            key={child.props.id}\n            direction=\"left\"\n            in={child.props.id === view}\n            mountOnEnter\n            unmountOnExit\n            appear={false}\n          >\n            <div className={classes.viewContainer2}>{child}</div>\n          </Slide>\n        ))}\n      </div>\n    </div>\n  );\n});\n\nexport default OmniPanel;\n","import React from 'react';\n\nexport interface OmniPanelViewProps extends React.PropsWithChildren<{}> {\n  id: number;\n}\n\nexport default function OmniPanelView(props: OmniPanelViewProps): React.ReactElement {\n  return <React.Fragment>{props.children}</React.Fragment>;\n}\n","import {\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelProps,\n  ExpansionPanelSummary,\n  ListItemText,\n  makeStyles,\n  Typography,\n} from '@material-ui/core';\nimport { ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n  summary: {\n    marginTop: 0,\n    marginBottom: 0,\n  },\n\n  details: {\n    flexFlow: 'column',\n  },\n\n  detailLine: {\n    width: '100%',\n    display: 'inline-flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0.5),\n  },\n}));\n\nexport interface PlaceItemProps extends Omit<ExpansionPanelProps, 'children'> {\n  place: RomiCore.Place;\n  level: RomiCore.Level;\n}\n\nexport const PlaceItem = React.forwardRef(function(\n  props: PlaceItemProps,\n  ref: React.Ref<HTMLElement>,\n): React.ReactElement {\n  const { place, level, ...otherProps } = props;\n  const classes = useStyles();\n\n  return (\n    <ExpansionPanel ref={ref} {...otherProps}>\n      <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n        <ListItemText\n          className={classes.summary}\n          primary={place.name}\n          primaryTypographyProps={{ variant: 'h5' }}\n          secondary={level.name}\n        />\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails className={classes.details}>\n        <div className={classes.detailLine}>\n          <Typography>Location:</Typography>\n          <Typography>{`${level.name} (${place.x.toFixed(3)}, ${place.y.toFixed(\n            3,\n          )}, ${place.yaw.toFixed(3)})`}</Typography>\n        </div>\n        <Divider />\n        <div className={classes.detailLine}>\n          <Typography>Position Tolerance:</Typography>\n          <Typography>{place.position_tolerance.toFixed(3)}</Typography>\n        </div>\n        <Divider />\n        <div className={classes.detailLine}>\n          <Typography>Yaw Tolerance:</Typography>\n          <Typography>{place.yaw_tolerance.toFixed(3)}</Typography>\n        </div>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n});\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\nimport { PlaceItem } from './place-item';\nimport { SpotlightValue } from './spotlight-value';\n\nexport interface PlacesPanelProps {\n  buildingMap: Readonly<RomiCore.BuildingMap>;\n  spotlight?: Readonly<SpotlightValue<string>>;\n  onPlaceClick?(place: RomiCore.Place): void;\n}\n\nexport default function PlacesPanel(props: PlacesPanelProps): React.ReactElement {\n  const { buildingMap, spotlight, onPlaceClick } = props;\n  const placeRefs = React.useRef<Record<string, HTMLElement | null>>({});\n  const [expanded, setExpanded] = React.useState<Readonly<Record<string, boolean>>>({});\n\n  React.useEffect(() => {\n    if (!spotlight) {\n      return;\n    }\n    const ref = placeRefs.current[spotlight.value];\n    if (!ref) {\n      return;\n    }\n    setExpanded(prev => ({\n      ...prev,\n      [spotlight.value]: true,\n    }));\n    ref.scrollIntoView({ behavior: 'smooth' });\n  }, [spotlight]);\n\n  return (\n    <React.Fragment>\n      {buildingMap.levels.flatMap(level =>\n        level.places.map(place => (\n          <PlaceItem\n            key={place.name}\n            ref={ref => (placeRefs.current[place.name] = ref)}\n            place={place}\n            level={level}\n            onClick={() => onPlaceClick && onPlaceClick(place)}\n            expanded={Boolean(expanded[place.name])}\n            onChange={(_, newExpanded) =>\n              setExpanded(prev => ({\n                ...prev,\n                [place.name]: newExpanded,\n              }))\n            }\n          />\n        )),\n      )}\n    </React.Fragment>\n  );\n}\n","import { Tab, Tabs, Box, withStyles, Theme, createStyles } from '@material-ui/core';\nimport React from 'react';\n\ninterface StyledTabsProps {\n  value: number;\n  onChange: (event: React.ChangeEvent<{}>, newValue: number) => void;\n}\ninterface StyledTabProps {\n  label: string;\n}\n\nexport const AntTabs = withStyles({\n  root: {\n    borderBottom: '1px solid #e8e8e8',\n  },\n  indicator: {\n    backgroundColor: '#1890ff',\n  },\n})(Tabs);\n\nexport const AntTab = withStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      textTransform: 'none',\n      minWidth: 72,\n      fontWeight: theme.typography.fontWeightRegular,\n      marginRight: theme.spacing(4),\n      fontFamily: [\n        '-apple-system',\n        'BlinkMacSystemFont',\n        '\"Segoe UI\"',\n        'Roboto',\n        '\"Helvetica Neue\"',\n        'Arial',\n        'sans-serif',\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"',\n      ].join(','),\n      '&:hover': {\n        color: '#40a9ff',\n        opacity: 1,\n      },\n      '&$selected': {\n        color: '#1890ff',\n        fontWeight: theme.typography.fontWeightMedium,\n      },\n      '&:focus': {\n        color: '#40a9ff',\n      },\n    },\n    selected: {},\n  }),\n)((props: StyledTabProps) => <Tab disableRipple {...props} />);\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nexport function TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-prevent-tabpanel-${index}`}\n      aria-labelledby={`scrollable-prevent-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={1}>{children}</Box>}\n    </div>\n  );\n}\n","import { Divider, Typography, makeStyles } from '@material-ui/core';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\n\ninterface robotInformationProps {\n  robot: Readonly<RomiCore.RobotState>;\n}\n\nexport const RobotInformation = (props: robotInformationProps) => {\n  const { robot } = props;\n  const classes = useStyles();\n  return (\n    <>\n      <div className={classes.expansionDetailLine}>\n        <Typography variant=\"subtitle2\">Model:</Typography>\n        <Typography variant=\"body1\">{robot.model}</Typography>\n      </div>\n      <Divider />\n      <div className={classes.expansionDetailLine}>\n        <Typography variant=\"subtitle2\">Level:</Typography>\n        <Typography variant=\"body1\">{robot.location.level_name}</Typography>\n      </div>\n      <Divider />\n      <div className={classes.expansionDetailLine}>\n        <Typography variant=\"subtitle2\">Position:</Typography>\n        <Typography variant=\"body1\">\n          {`(${robot.location.x.toFixed(3)}, ${robot.location.y.toFixed(3)})`}\n        </Typography>\n      </div>\n      <Divider />\n      <div className={classes.expansionDetailLine}>\n        <Typography variant=\"subtitle2\">Yaw:</Typography>\n        <Typography variant=\"body1\">{robot.location.yaw.toFixed(3)}</Typography>\n      </div>\n      <Divider />\n      <div className={classes.expansionDetailLine}>\n        <Typography variant=\"subtitle2\">Task Id:</Typography>\n        <Typography variant=\"body1\" noWrap>\n          {robot.task_id}\n        </Typography>\n      </div>\n      <Divider />\n      <div className={classes.expansionDetailLine}>\n        <Typography variant=\"subtitle2\">Battery:</Typography>\n        <Typography variant=\"body1\">{robot.battery_percent}</Typography>\n      </div>\n    </>\n  );\n};\n\nconst useStyles = makeStyles(theme => ({\n  expansionDetailLine: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0.5),\n  },\n}));\n","import { makeStyles, TextField, Button } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport React, { useState } from 'react';\nimport { successMsg } from '../util/alerts';\n\ninterface robotLoopFormProps {\n  fleetName: string;\n  requestLoop(\n    fleetName: string,\n    numLoops: number,\n    startLocationPoint: string,\n    endLocationPoint: string,\n  ): void;\n  listOfPlaces: string[];\n}\n\nexport const RobotLoopForm = (props: robotLoopFormProps) => {\n  const { requestLoop, fleetName, listOfPlaces } = props;\n  const classes = useStyles();\n\n  const [numLoops, setNumLoops] = useState(0);\n  const [startLocation, setStartLocation] = useState(\n    listOfPlaces.length >= 2 ? listOfPlaces[0] : '',\n  );\n  const [finishLocation, setFinishLocation] = useState(\n    listOfPlaces.length >= 2 ? listOfPlaces[1] : '',\n  );\n\n  // Error states\n  const [numLoopsError, setNumLoopsError] = useState('');\n  const [startLocationError, setStartLocationError] = useState('');\n  const [finishLocationError, setFinishLocationError] = useState('');\n\n  const cleanUpForm = () => {\n    setNumLoops(0);\n    setStartLocation(listOfPlaces.length >= 2 ? listOfPlaces[0] : '');\n    setFinishLocation(listOfPlaces.length >= 2 ? listOfPlaces[1] : '');\n    cleanUpError();\n  };\n\n  const cleanUpError = () => {\n    setNumLoopsError('');\n    setStartLocationError('');\n    setFinishLocationError('');\n  };\n\n  const handleRequestLoop = (event: any) => {\n    event.preventDefault();\n    if (isFormValid()) {\n      requestLoop(fleetName, numLoops, startLocation, finishLocation);\n      successMsg('Success');\n      cleanUpForm();\n    }\n  };\n\n  const isFormValid = () => {\n    let isValid = true;\n    cleanUpError();\n    if (numLoops === 0 || numLoops < 0) {\n      setNumLoopsError('Loops can only be > 0');\n      isValid = false;\n    }\n    if (startLocation === finishLocation) {\n      setStartLocationError('Start Location cannot be equal to finish Location');\n      setFinishLocationError('Start Location cannot be equal to finish Location');\n      isValid = false;\n    }\n\n    if (!startLocation) {\n      setStartLocationError('Location cannot be empty');\n      isValid = false;\n    }\n    if (!finishLocation) {\n      setFinishLocationError('Location cannot be empty');\n      isValid = false;\n    }\n\n    return isValid;\n  };\n\n  return (\n    <form className={classes.form} onSubmit={handleRequestLoop}>\n      <div className={classes.divForm}>\n        <TextField\n          name=\"numLoops\"\n          onChange={e => {\n            setNumLoops(!!e.target.value ? parseInt(e.target.value) : 0);\n          }}\n          placeholder=\"Number of loops\"\n          type=\"number\"\n          value={numLoops || ''}\n          className={classes.input}\n          label=\"Number of loops\"\n          variant=\"outlined\"\n          error={!!numLoopsError}\n        />\n        {numLoopsError && (\n          <p id=\"numLoopsError\" className={classes.error}>\n            {numLoopsError}\n          </p>\n        )}\n      </div>\n\n      <div className={classes.divForm}>\n        <Autocomplete\n          getOptionLabel={option => option}\n          onChange={(e, value) => setStartLocation(value || '')}\n          options={listOfPlaces}\n          renderInput={params => (\n            <TextField {...params} label=\"Pick Start Location\" variant=\"outlined\" />\n          )}\n          value={!!startLocation ? startLocation : null}\n        />\n        {startLocationError && (\n          <p id=\"startLocationError\" className={classes.error}>\n            {startLocationError}\n          </p>\n        )}\n      </div>\n\n      <div className={classes.divForm}>\n        <Autocomplete\n          getOptionLabel={option => option}\n          onChange={(e, value) => setFinishLocation(value || '')}\n          options={listOfPlaces}\n          renderInput={params => (\n            <TextField {...params} label=\"Pick Finish Location\" variant=\"outlined\" />\n          )}\n          value={!!finishLocation ? finishLocation : null}\n        />\n        {finishLocationError && (\n          <p id=\"finishLocationError\" className={classes.error}>\n            {finishLocationError}\n          </p>\n        )}\n      </div>\n\n      <div className={classes.buttonContainer}>\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\" className={classes.button}>\n          {'Request'}\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nconst useStyles = makeStyles(theme => ({\n  form: {\n    padding: '0.5rem',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  divForm: {\n    padding: '0.5rem',\n    width: '100%',\n  },\n  error: {\n    color: theme.palette.error.main,\n  },\n  input: {\n    width: '100%',\n  },\n  button: {\n    width: '100%',\n  },\n  buttonContainer: {\n    paddingTop: '0.5rem',\n    paddingLeft: '0.5rem',\n    width: '100%',\n  },\n}));\n","import Swal from 'sweetalert2'\n\nexport const successMsg = (msg: string) => {\n    Swal.fire({\n        title: 'Done!',\n        text: !!msg ? `${msg}` : 'Successful Operation',\n        icon: 'success',\n        timer: 2000,\n    });\n};\n\nexport const errorMsg = (error: string) => {\n    Swal.fire({\n        title: 'Ups',\n        text: !!error ? `${error}` : 'An error has occurred',\n        icon: 'error',\n    });\n};\n","import {\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelProps,\n  ExpansionPanelSummary,\n  makeStyles,\n  Typography,\n} from '@material-ui/core';\nimport { AntTabs, AntTab, TabPanel } from './tab';\nimport { ExpandMore as ExpandMoreIcon } from '@material-ui/icons';\nimport { RobotInformation } from './robot-item-information';\nimport { RobotLoopForm } from './robot-item-form';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport fakePlaces from '../mock/data/places';\nimport React from 'react';\n\nexport interface RobotItemProps extends Omit<ExpansionPanelProps, 'children'> {\n  fleetName: string;\n  robot: Readonly<RomiCore.RobotState>;\n  onRobotClick?(robot: RomiCore.RobotState): void;\n  requestLoop(\n    fleetName: string,\n    numLoops: number,\n    startLocationPoint: string,\n    endLocationPoint: string,\n  ): void;\n}\n\nexport const RobotItem = React.forwardRef(function(\n  props: RobotItemProps,\n  ref: React.Ref<HTMLElement>,\n): React.ReactElement {\n  const { robot, onRobotClick, requestLoop, fleetName, ...otherProps } = props;\n  const [value, setValue] = React.useState(0);\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n  const classes = useStyles();\n  const listOfPlaces = fakePlaces()[fleetName];\n  return (\n    <ExpansionPanel ref={ref} {...otherProps}>\n      <ExpansionPanelSummary\n        classes={{ content: classes.expansionSummaryContent }}\n        expandIcon={<ExpandMoreIcon />}\n      >\n        <Typography variant=\"h5\">{robot.name}</Typography>\n        <Typography className={classes.robotStatusLabel} variant=\"button\">\n          {robotModeToString(robot.mode)}\n        </Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails className={classes.expansionDetail}>\n        <AntTabs value={value} onChange={handleChange} aria-label=\"ant example\">\n          <AntTab label=\"Info\" />\n          <AntTab label=\"Loop\" />\n          <AntTab label=\"Delivery\" />\n        </AntTabs>\n        <TabPanel value={value} index={0}>\n          <RobotInformation robot={robot} />\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n          {!!listOfPlaces && (\n            <RobotLoopForm\n              requestLoop={requestLoop}\n              fleetName={fleetName}\n              listOfPlaces={listOfPlaces}\n            />\n          )}\n        </TabPanel>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n});\n\nexport default RobotItem;\n\nconst useStyles = makeStyles(theme => ({\n  expansionSummaryContent: {\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n\n  expansionDetail: {\n    flexFlow: 'column',\n    padding: '0',\n    overflowX: 'auto',\n  },\n\n  expansionDetailLine: {\n    display: 'inline-flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0.5),\n  },\n\n  robotStatusLabel: {\n    borderRadius: theme.shape.borderRadius,\n    borderStyle: 'solid',\n    borderColor: theme.palette.info.main,\n    border: 2,\n    padding: 5,\n    minWidth: '4rem',\n    textAlign: 'center',\n  },\n}));\n\nfunction robotModeToString(robotMode: RomiCore.RobotMode): string {\n  switch (robotMode.mode) {\n    case RomiCore.RobotMode.MODE_CHARGING:\n      return 'Charging';\n    case RomiCore.RobotMode.MODE_DOCKING:\n      return 'Docking';\n    case RomiCore.RobotMode.MODE_EMERGENCY:\n      return 'Emergency';\n    case RomiCore.RobotMode.MODE_GOING_HOME:\n      return 'Going Home';\n    case RomiCore.RobotMode.MODE_IDLE:\n      return 'Idle';\n    case RomiCore.RobotMode.MODE_MOVING:\n      return 'Moving';\n    case RomiCore.RobotMode.MODE_PAUSED:\n      return 'Paused';\n    case RomiCore.RobotMode.MODE_WAITING:\n      return 'Waiting';\n    default:\n      return `Unknown (${robotMode.mode})`;\n  }\n}\n","export default function fakePlaces(): Record<string, string[]> {\n    /**\n     * nameOfFleet: [places, available, to, go]\n     */\n    return {\n        magni: [\n            'supplies',\n            'magni2_charger',\n            'coe',\n            'magni1_charger',\n            'hardware_2',\n            'cubicle_2',\n            'pantry',\n            'station_1',\n            'lounge',\n            'cubicle_1',\n            'hardware_1',\n            'station_2'],\n        SuperFleet: ['supplies',\n            'magni2_charger',\n            'coe',\n            'magni1_charger',\n            'hardware_2',\n            'cubicle_2',\n            'pantry',\n            'station_1',\n            'lounge',\n            'cubicle_1',\n            'hardware_1',\n            'station_2'],\n        // Add here a new fleet with its places\n    }\n}\n","import { SpotlightValue } from './spotlight-value';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\nimport RobotItem from './robot-item';\n\n/**\n    * task_id is intended to be a pseudo-random string generated by the caller which can be used to \n    * identify this task as it moves between the queues to completion (or failure).\n\n    * robot_type can be used to specify a particular robot fleet for this request\n\n    * num_loops The number of times the robot should loop between the specified points. \n\n    * start_name The name of the waypoint where the robot should begin its loop. If the robot is \n    * not already at this point, it will begin the task by moving there.\n\n    * finish_name The name of the waypoint where the robot should end its looping. The robot will\n    * visit this waypoint num_loops times and then stop here on the last visit.\n   */\nexport function requestLoop(\n  loopRequestPub: RomiCore.Publisher<RomiCore.Loop> | null,\n  robotName: string,\n  numLoops: number,\n  startLocationPoint: string,\n  endLocationPoint: string,\n) {\n  loopRequestPub?.publish({\n    finish_name: endLocationPoint,\n    num_loops: numLoops,\n    robot_type: robotName,\n    start_name: startLocationPoint,\n    task_id: uuidv4(),\n  });\n}\n\nexport interface RobotsPanelProps {\n  fleets: readonly RomiCore.FleetState[];\n  spotlight?: Readonly<SpotlightValue<string>>;\n  transport?: Readonly<RomiCore.Transport>;\n  onRobotClick?(robot: RomiCore.RobotState): void;\n}\n\nexport default function RobotsPanel(props: RobotsPanelProps): React.ReactElement {\n  const { fleets, spotlight, onRobotClick, transport } = props;\n  const robotRefs = React.useRef<Record<string, HTMLElement | null>>({});\n  const [expanded, setExpanded] = React.useState<Readonly<Record<string, boolean>>>({});\n\n  const loopRequestPub = React.useMemo(\n    () => (transport ? transport.createPublisher(RomiCore.loopRequests) : null),\n    [transport],\n  );\n\n  const handleRequestLoop = (\n    fleetName: string,\n    numLoops: number,\n    startLocationPoint: string,\n    endLocationPoint: string,\n  ) => {\n    requestLoop(loopRequestPub, fleetName, numLoops, startLocationPoint, endLocationPoint);\n  };\n\n  React.useEffect(() => {\n    if (!spotlight) {\n      return;\n    }\n    const ref = robotRefs.current[spotlight.value];\n    if (!ref) {\n      return;\n    }\n    setExpanded(prev => ({\n      ...prev,\n      [spotlight.value]: true,\n    }));\n    ref.scrollIntoView({ behavior: 'smooth' });\n  }, [spotlight]);\n\n  return (\n    <React.Fragment>\n      {fleets.flatMap(fleet =>\n        fleet.robots.map(robot => (\n          <RobotItem\n            key={robot.name}\n            ref={ref => (robotRefs.current[robot.name] = ref)}\n            requestLoop={handleRequestLoop}\n            fleetName={fleet.name}\n            robot={robot}\n            onClick={() => onRobotClick && onRobotClick(robot)}\n            expanded={Boolean(expanded[robot.name])}\n            onChange={(_, newExpanded) =>\n              setExpanded(prev => ({\n                ...prev,\n                [robot.name]: newExpanded,\n              }))\n            }\n            TransitionProps={{ unmountOnExit: true }}\n          />\n        )),\n      )}\n    </React.Fragment>\n  );\n}\n","export function toBlobUrl(data: Uint8Array) {\n  const blob = new Blob([data]);\n  return URL.createObjectURL(blob);\n}\n\nexport type PromiseType<T> = T extends PromiseLike<infer U> ? U : never;","/**\n * This can be slow so it should be memoed.\n * @param name\n * @param model\n */\nexport async function computeRobotColor(name: string, model: string): Promise<string> {\n  const modelHash = new Uint16Array(await _hash(model));\n  const hue = modelHash[0] % 360;\n  const nameHash = new Uint16Array(await _hash(name));\n  const satlum = nameHash[0] % 2500;\n  const saturation = 50 + (satlum % 50);\n  const luminance = 25 + satlum / 50;\n  return `hsl(${hue}, ${saturation}%, ${luminance}%)`;\n}\n\nasync function _hash(s: string): Promise<ArrayBuffer> {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(s);\n  return crypto.subtle.digest('SHA-256', data);\n}\n\nexport default class ColorManager {\n  async robotColor(name: string, model: string): Promise<string> {\n    const key = this._robotKey(name, model);\n    let color = this._robotColorCache[key];\n    if (!color) {\n      const modelHash = new Uint16Array(await _hash(model));\n      const hue = modelHash[0] % 360;\n      const nameHash = new Uint16Array(await _hash(name));\n      const satlum = nameHash[0] % 2500;\n      const saturation = 50 + (satlum % 50);\n      const luminance = 25 + satlum / 50;\n      color = `hsl(${hue}, ${saturation}%, ${luminance}%)`;\n      this._robotColorCache[key] = color;\n    }\n    return color;\n  }\n\n  robotColorFromCache(name: string, model: string): string | null {\n    const color = this._robotColorCache[this._robotKey(name, model)];\n    return color ? color : null;\n  }\n\n  private _robotColorCache: Record<string, string> = {};\n\n  private _robotKey(name: string, model: string) {\n    return `${name}__${model}`;\n  }\n}\n","import * as L from 'leaflet';\n\nexport function viewBoxFromLeafletBounds(bounds: L.LatLngBoundsExpression): string {\n  const lbounds = bounds instanceof L.LatLngBounds ? bounds : new L.LatLngBounds(bounds);\n  const width = lbounds.getEast() - lbounds.getWest();\n  const height = lbounds.getNorth() - lbounds.getSouth();\n  return `0 0 ${width} ${height}`;\n}\n","import { makeStyles, useTheme } from '@material-ui/core';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\n\nexport interface PlaceProps {\n  place: RomiCore.Place;\n  size: number;\n  onClick?(e: React.MouseEvent<SVGGElement>, place: RomiCore.Place): void;\n}\n\nconst Place = React.forwardRef(function(\n  props: PlaceProps,\n  ref: React.Ref<SVGGElement>,\n): React.ReactElement {\n  const { place, size, onClick } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  return (\n    <g ref={ref} onClick={e => onClick && onClick(e as any, place)}>\n      <rect\n        className={classes.placeMarker}\n        x={place.x - size * 0.5}\n        y={-place.y - size * 0.5}\n        width={size}\n        height={size}\n        fill={theme.palette.primary.main}\n        opacity={0.95}\n      />\n    </g>\n  );\n});\n\nexport default Place;\n\nconst useStyles = makeStyles(() => ({\n  placeMarker: {\n    cursor: 'pointer',\n    pointerEvents: 'auto',\n  },\n}));\n","import { SVGOverlay as SVGOverlay_, SVGOverlayProps as SVGOverlayProps_ } from 'react-leaflet';\n\n/**\n * SVGOverlay typings are broken, its missing the required attribute 'bounds'.\n */\nexport interface SVGOverlayProps extends SVGOverlayProps_ {\n  bounds: L.LatLngBoundsExpression;\n}\n\nexport const SVGOverlay: React.FunctionComponent<SVGOverlayProps> = SVGOverlay_ as any;\n\nexport default SVGOverlay;\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\nimport { viewBoxFromLeafletBounds } from '../../util/css-utils';\nimport Place from './place';\nimport SVGOverlay, { SVGOverlayProps } from './svg-overlay';\n\nexport interface PlacesOverlayProps extends SVGOverlayProps {\n  places: readonly RomiCore.Place[];\n  onPlaceClick?(place: RomiCore.Place): void;\n}\n\nexport default function PlacesOverlay(props: PlacesOverlayProps): React.ReactElement {\n  const { places, onPlaceClick, ...otherProps } = props;\n  const viewBox = viewBoxFromLeafletBounds(props.bounds);\n  const size = 1;\n\n  return (\n    <SVGOverlay {...otherProps}>\n      <svg viewBox={viewBox}>\n        {places.map(place => (\n          <Place\n            key={place.name}\n            place={place}\n            size={size}\n            onClick={(_, place_) => onPlaceClick && onPlaceClick(place_)}\n          />\n        ))}\n      </svg>\n    </SVGOverlay>\n  );\n}\n","export interface Pose2D {\n  x: number;\n  y: number;\n  theta: number;\n}\n\nexport interface Segment {\n  initialPose: number;\n  finalPose: number;\n  initialVelocity: number;\n  finalVelocity: number;\n  initialTime: number;\n  finalTime: number;\n}\n\nexport interface CoefficientSet {\n  a: number;\n  b: number;\n  c: number;\n  d: number;\n}\n\nexport interface Velocity {\n  x: number;\n  y: number;\n  theta: number;\n}\n\nexport interface Knot {\n  pose: Pose2D;\n  velocity: Velocity;\n  time: number;\n}\n\nexport interface SegmentCoefficients {\n  x: CoefficientSet;\n  y: CoefficientSet;\n  theta: CoefficientSet;\n  initialTime: number;\n  finalTime: number;\n}\n\nexport function segmentToCoefficientSet(segment: Segment): CoefficientSet {\n  const {\n    initialPose: x0,\n    finalPose: x1,\n    initialVelocity: v0,\n    finalVelocity: v1,\n    initialTime,\n    finalTime,\n  } = segment;\n\n  const dt = finalTime - initialTime;\n  const w0 = v0 / dt;\n  const w1 = v1 / dt;\n\n  const a = w1 + w0 - x1 * 2 + x0 * 2;\n  const b = -w1 - w0 * 2 + x1 * 3 - x0 * 3;\n\n  return {\n    a,\n    b,\n    c: w0,\n    d: x0,\n  };\n}\n\nexport function assignKnotsToSegment(knot: Knot, nextKnot: Knot, forCoordinate: keyof Pose2D) {\n  return {\n    initialPose: knot.pose[forCoordinate],\n    finalPose: nextKnot.pose[forCoordinate],\n    initialVelocity: knot.velocity[forCoordinate],\n    finalVelocity: nextKnot.velocity[forCoordinate],\n    initialTime: knot.time,\n    finalTime: nextKnot.time,\n  };\n}\n\nexport function knotsToSegmentCoefficientsArray(knots: Knot[]): SegmentCoefficients[] {\n  const scs: SegmentCoefficients[] = [];\n\n  for (let i = 0; i < knots.length - 1; ++i) {\n    const knot = knots[i];\n    const nextKnot = knots[i + 1];\n\n    const sc: SegmentCoefficients = {\n      x: segmentToCoefficientSet(assignKnotsToSegment(knot, nextKnot, 'x')),\n      y: segmentToCoefficientSet(assignKnotsToSegment(knot, nextKnot, 'y')),\n      theta: segmentToCoefficientSet(assignKnotsToSegment(knot, nextKnot, 'theta')),\n      initialTime: knot.time,\n      finalTime: nextKnot.time,\n    };\n\n    scs.push(sc);\n  }\n\n  return scs;\n}\n\nexport function getInterpolatedTime(initialTime: number, finalTime: number, time: number) {\n  return (time - initialTime) / (finalTime - initialTime);\n}\n\nexport function resolveSpline(\n  coefficientSet: CoefficientSet,\n  interpolatedTime: number,\n  interpolatedTimePow2 = interpolatedTime ** 2,\n  interpolatedTimePow3 = interpolatedTime ** 3,\n): number {\n  return (\n    coefficientSet.a * interpolatedTimePow3 +\n    coefficientSet.b * interpolatedTimePow2 +\n    coefficientSet.c * interpolatedTime +\n    coefficientSet.d\n  );\n}\n\nexport function getPositionFromSegmentCoefficientsArray(\n  time: number,\n  scs: SegmentCoefficients[],\n): Pose2D | null {\n  let sc: SegmentCoefficients | undefined;\n\n  for (sc of scs) {\n    if (time >= sc.initialTime && time <= sc.finalTime) {\n      break;\n    }\n  }\n\n  if (!sc) {\n    return null;\n  }\n\n  const { x: xCoeff, y: yCoeff, theta: thetaCoeff, initialTime, finalTime } = sc;\n\n  const interpolatedTime = getInterpolatedTime(initialTime, finalTime, time);\n  const interpolatedTimePow2 = interpolatedTime ** 2;\n  const interpolatedTimePow3 = interpolatedTime ** 3;\n\n  return {\n    x: resolveSpline(xCoeff, interpolatedTime, interpolatedTimePow2, interpolatedTimePow3),\n    y: resolveSpline(yCoeff, interpolatedTime, interpolatedTimePow2, interpolatedTimePow3),\n    theta: resolveSpline(thetaCoeff, interpolatedTime, interpolatedTimePow2, interpolatedTimePow3),\n  };\n}\n\nfunction bezierHelper(coeffs: CoefficientSet): [number, number, number, number] {\n  const a = coeffs.a;\n  const b = coeffs.b;\n  const c = coeffs.c;\n  const d = coeffs.d;\n  const p0 = d;\n  const p1 = (c + p0 * 3) / 3;\n  const p2 = (b - p0 * 3 + p1 * 6) / 3;\n  const p3 = a + p0 - p1 * 3 + p2 * 3;\n\n  return [p0, p1, p2, p3];\n}\n\nexport function bezierControlPoints(segmentCoefficients: SegmentCoefficients) {\n  const px = bezierHelper(segmentCoefficients.x);\n  const py = bezierHelper(segmentCoefficients.y);\n  return px.map((x, i) => [x, py[i]]);\n}\n","import { useTheme } from '@material-ui/core';\nimport React from 'react';\nimport { Conflict, rawKnotsToKnots, Trajectory } from '../../robot-trajectory-manager';\nimport { bezierControlPoints, knotsToSegmentCoefficientsArray } from '../../util/cublic-spline';\nimport { TrajectoryPath } from './trajectory-animations';\n\nexport interface RobotTrajectoryProps\n  extends React.RefAttributes<SVGPathElement>,\n    React.SVGAttributes<SVGPathElement> {\n  trajectory: Trajectory;\n  conflicts: Conflict[];\n  footprint: number;\n}\n\nexport const RobotTrajectory = React.forwardRef(function(\n  props: RobotTrajectoryProps,\n  ref: React.Ref<SVGPathElement>,\n): React.ReactElement {\n  const { trajectory, conflicts, footprint, ...otherProps } = props;\n  const theme = useTheme();\n\n  const pathD = React.useMemo(() => {\n    const knots = rawKnotsToKnots(trajectory.segments);\n    const coeff = knotsToSegmentCoefficientsArray(knots);\n    const bezierSplines = coeff.map(bezierControlPoints);\n\n    let d = `M ${bezierSplines[0][0][0]} ${-bezierSplines[0][0][1]} C `;\n    bezierSplines.map(\n      bzCurves =>\n        (d +=\n          `${bzCurves[1][0]} ${-bzCurves[1][1]} ` +\n          `${bzCurves[2][0]} ${-bzCurves[2][1]} ` +\n          `${bzCurves[3][0]} ${-bzCurves[3][1]} `),\n    );\n\n    return d;\n  }, [trajectory]);\n\n  const color = React.useMemo(\n    () =>\n      conflicts.includes(trajectory.id) ? theme.palette.error.main : theme.palette.success.main,\n    [trajectory, conflicts, theme],\n  );\n\n  return (\n    <path\n      ref={ref}\n      d={pathD}\n      stroke={color}\n      opacity={0.8}\n      strokeWidth={footprint * 0.8}\n      strokeLinecap=\"round\"\n      fill=\"none\"\n      pathLength={1}\n      strokeDasharray={2}\n      strokeDashoffset={0}\n      {...otherProps}\n    />\n  );\n});\n\nexport default RobotTrajectory;\n\nexport function trajectoryPath(trajectory: Trajectory): TrajectoryPath {\n  const knots = rawKnotsToKnots(trajectory.segments);\n  const coeff = knotsToSegmentCoefficientsArray(knots);\n  const bezierSplines = coeff.map(bezierControlPoints);\n\n  const totalDuration = knots[knots.length - 1].time - knots[0].time;\n  const segOffsets = knots.map(k => (k.time - knots[0].time) / totalDuration);\n\n  let d = `M ${bezierSplines[0][0][0]} ${-bezierSplines[0][0][1]} C `;\n  bezierSplines.map(\n    bzCurves =>\n      (d +=\n        `${bzCurves[1][0]} ${-bzCurves[1][1]} ` +\n        `${bzCurves[2][0]} ${-bzCurves[2][1]} ` +\n        `${bzCurves[3][0]} ${-bzCurves[3][1]} `),\n  );\n\n  return {\n    traj: trajectory,\n    d,\n    segOffsets,\n  };\n}\n","import * as L from 'leaflet';\nimport React from 'react';\nimport { Conflict, Trajectory } from '../../robot-trajectory-manager';\nimport ColorManager from './colors';\nimport RobotTrajectory, { RobotTrajectoryProps } from './robot-trajectory';\nimport SVGOverlay, { SVGOverlayProps } from './svg-overlay';\n\nexport interface RobotTrajectoriesOverlayProps extends SVGOverlayProps {\n  trajs: readonly Trajectory[];\n  conflicts: Conflict[];\n  colorManager: Readonly<ColorManager>;\n}\n\nexport default function RobotTrajectoriesOverlay(\n  props: RobotTrajectoriesOverlayProps,\n): React.ReactElement {\n  const { trajs, conflicts, colorManager, ...otherProps } = props;\n  const trajectoryContext = React.useContext(RobotTrajectoryContext);\n\n  const bounds =\n    props.bounds instanceof L.LatLngBounds ? props.bounds : new L.LatLngBounds(props.bounds);\n  const width = bounds.getEast() - bounds.getWest();\n  const height = bounds.getNorth() - bounds.getSouth();\n  const viewBox = `0 0 ${width} ${height}`;\n\n  // FIXME: hardcode for now, as the source of the footprint is expected to change.\n  const footprint = 0.5;\n\n  return (\n    <SVGOverlay {...otherProps}>\n      <svg viewBox={viewBox}>\n        {trajs.map(traj => (\n          <trajectoryContext.Component\n            key={traj.id}\n            trajectory={traj}\n            footprint={footprint}\n            conflicts={conflicts}\n          />\n        ))}\n      </svg>\n    </SVGOverlay>\n  );\n}\n\nexport interface RobotTrajectoryContext {\n  Component: React.ComponentType<RobotTrajectoryProps>;\n}\n\nexport const RobotTrajectoryContext = React.createContext<RobotTrajectoryContext>({\n  Component: RobotTrajectory,\n});\n","import { makeStyles } from '@material-ui/core';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\nimport ColorManager from './colors';\n\nconst useStyles = makeStyles(() => ({\n  robotMarker: {\n    cursor: 'pointer',\n    pointerEvents: 'auto',\n  },\n  robotText: {\n    dominantBaseline: 'central',\n    textAnchor: 'middle',\n    fontSize: '0.18px',\n    fontWeight: 'bold',\n    fill: 'white',\n  },\n}));\n\nexport interface RobotProps {\n  robot: RomiCore.RobotState;\n  footprint: number;\n  colorManager: ColorManager;\n  onClick?(e: React.MouseEvent<SVGGElement>, robot: RomiCore.RobotState): void;\n}\n\nconst Robot = React.forwardRef(function(\n  props: RobotProps,\n  ref: React.Ref<SVGGElement>,\n): React.ReactElement {\n  const classes = useStyles();\n  const { robot, footprint, colorManager, onClick } = props;\n  const [robotColor, setRobotColor] = React.useState<string | null>(() =>\n    colorManager.robotColorFromCache(robot.name, robot.model),\n  );\n\n  const nose = React.useMemo(\n    () => [\n      robot.location.x + Math.cos(robot.location.yaw) * footprint,\n      robot.location.y + Math.sin(robot.location.yaw) * footprint,\n    ],\n    [robot, footprint],\n  );\n\n  React.useLayoutEffect(() => {\n    if (robotColor) {\n      return;\n    }\n    (async () => {\n      setRobotColor(await colorManager.robotColor(robot.name, robot.model));\n    })();\n  }, [robot, robotColor, colorManager]);\n\n  return (\n    <g ref={ref} onClick={e => onClick && onClick(e, robot)}>\n      {robotColor && (\n        <React.Fragment>\n          <filter id={`${robot.name}-shadow`} x=\"-20%\" y=\"-20%\" width=\"140%\" height=\"140%\">\n            <feDropShadow dx=\"0\" dy=\"0\" stdDeviation={footprint * 0.15} floodColor=\"black\" />\n          </filter>\n          <circle\n            className={classes.robotMarker}\n            onClick={e => onClick && onClick(e, robot)}\n            cx={robot.location.x}\n            cy={-robot.location.y}\n            r={footprint}\n            fill={robotColor}\n            filter={`url(#${robot.name}-shadow)`}\n          />\n          <line\n            x1={robot.location.x}\n            y1={-robot.location.y}\n            x2={nose[0]}\n            y2={-nose[1]}\n            stroke=\"black\"\n            strokeWidth=\"0.05\"\n          />\n          <text\n            id=\"robotName\"\n            className={classes.robotText}\n            x={robot.location.x}\n            y={-robot.location.y}\n          >\n            {robot.name.substring(0, 8)}\n          </text>\n        </React.Fragment>\n      )}\n    </g>\n  );\n});\n\nexport default Robot;\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport * as L from 'leaflet';\nimport React from 'react';\nimport ColorManager from './colors';\nimport Robot from './robot';\nimport SVGOverlay, { SVGOverlayProps } from './svg-overlay';\n\nexport interface RobotsOverlayProps extends SVGOverlayProps {\n  robots: readonly RomiCore.RobotState[];\n  colorManager: ColorManager;\n  onRobotClick?(robot: RomiCore.RobotState): void;\n}\n\nexport default function RobotsOverlay(props: RobotsOverlayProps): React.ReactElement {\n  const { robots, colorManager, onRobotClick, ...otherProps } = props;\n\n  const bounds =\n    props.bounds instanceof L.LatLngBounds ? props.bounds : new L.LatLngBounds(props.bounds);\n  const width = bounds.getEast() - bounds.getWest();\n  const height = bounds.getNorth() - bounds.getSouth();\n  const viewBox = `0 0 ${width} ${height}`;\n  const footprint = 0.5; // FIXME: hardcode for now, footprint data not available.\n  return (\n    <SVGOverlay {...otherProps}>\n      <svg viewBox={viewBox}>\n        {robots.map(robot => {\n          return (\n            <Robot\n              key={robot.name}\n              robot={robot}\n              footprint={footprint}\n              colorManager={colorManager}\n              onClick={(_, robot_) => onRobotClick && onRobotClick(robot_)}\n            />\n          );\n        })}\n      </svg>\n    </SVGOverlay>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\nimport React from 'react';\nimport { Trajectory } from '../../robot-trajectory-manager';\nimport { RobotTrajectoryProps } from './robot-trajectory';\n\nexport interface TrajectoryAnimationProps extends React.SVGAttributes<SVGPathElement> {\n  trajPath: TrajectoryPath;\n  duration: number;\n}\n\nexport interface TrajectoryPath {\n  traj: Trajectory;\n  d: string;\n  segOffsets: number[];\n}\n\n/**\n * Fills the trajectory as the robot moves through it.\n * @param TrajectoryComponent\n * @param animationScale Animation duration is calculated from the trajectory and the animation\n * scale. For example, a trajectory that lasts 10s with an animation of scale of will play over\n * 10/5 = 2s.\n */\nexport function withFillAnimation(\n  TrajectoryComponent: React.ComponentType<RobotTrajectoryProps>,\n  animationScale: number,\n): React.ComponentType<RobotTrajectoryProps> {\n  return props => {\n    const classes = useFillStyles();\n    const { trajectory } = props;\n    const pathRef = React.useRef<SVGPathElement>(null);\n\n    React.useLayoutEffect(() => {\n      if (!pathRef.current) {\n        return;\n      }\n\n      const offsets = keyframeOffsets(trajectory);\n      const pathAnim = pathRef.current.cloneNode(false) as SVGPathElement;\n      pathAnim.classList.add(classes.anim);\n      pathAnim.classList.remove(classes.highlight);\n      pathAnim.setAttribute('path-length', '1');\n      pathRef.current.parentElement?.appendChild(pathAnim);\n\n      pathAnim.animate(\n        offsets.map(offset => ({\n          offset: offset,\n          strokeDashoffset: 2 - offset,\n        })),\n        {\n          duration: animationDuration(trajectory, animationScale),\n          easing: 'linear',\n          fill: 'forwards',\n        },\n      );\n\n      return () => pathAnim.remove();\n    }, [trajectory, classes.anim, classes.highlight]);\n\n    return (\n      <g>\n        <TrajectoryComponent ref={pathRef} {...props} className={classes.highlight} />\n      </g>\n    );\n  };\n}\n\n/**\n * Follows the robot's position as it moves through its trajectory.\n * @param TrajectoryComponent\n * @param animationScale Animation duration is calculated from the trajectory and the animation\n * scale. For example, a trajectory that lasts 10s with an animation of scale of will play over\n * 10/5 = 2s.\n */\nexport function withFollowAnimation(\n  TrajectoryComponent: React.ComponentType<RobotTrajectoryProps>,\n  animationScale: number,\n): React.ComponentType<RobotTrajectoryProps> {\n  return props => {\n    const classes = useFollowStyles();\n    const { trajectory } = props;\n    const pathRef = React.useRef<SVGPathElement>(null);\n\n    React.useLayoutEffect(() => {\n      if (!pathRef.current) {\n        return;\n      }\n\n      const offsets = keyframeOffsets(trajectory);\n      const pathAnim = pathRef.current.cloneNode(false) as SVGPathElement;\n      pathAnim.classList.add(classes.anim);\n      pathAnim.classList.remove(classes.highlight);\n      pathAnim.setAttribute('path-length', '1');\n      const strokeWidth = Number(pathAnim.getAttribute('stroke-width') || 1);\n      const strokeDash = strokeWidth / pathAnim.getTotalLength();\n      pathAnim.setAttribute('stroke-dasharray', `${strokeDash} ${2 - strokeDash}`);\n      pathRef.current.parentElement?.appendChild(pathAnim);\n\n      pathAnim.animate(\n        offsets.map(offset => ({\n          offset: offset,\n          strokeDashoffset: Math.max(2 - offset, strokeDash + 1),\n        })),\n        {\n          duration: animationDuration(trajectory, animationScale),\n          easing: 'linear',\n          fill: 'forwards',\n        },\n      );\n\n      return () => pathAnim.remove();\n    }, [trajectory, classes.anim, classes.highlight]);\n\n    return (\n      <g>\n        <TrajectoryComponent ref={pathRef} {...props} className={classes.highlight} />\n      </g>\n    );\n  };\n}\n\n/**\n * Similar to fill animation, but only fills the outline of the trajectory.\n * @param TrajectoryComponent\n * @param animationScale Animation duration is calculated from the trajectory and the animation\n * scale. For example, a trajectory that lasts 10s with an animation of scale of will play over\n * 10/5 = 2s.\n */\nexport function withOutlineAnimation(\n  TrajectoryComponent: React.ComponentType<RobotTrajectoryProps>,\n  animationScale: number,\n): React.ComponentType<RobotTrajectoryProps> {\n  return props => {\n    const classes = useOutlineStyles();\n    const { trajectory } = props;\n    const pathRef = React.useRef<SVGPathElement>(null);\n\n    React.useLayoutEffect(() => {\n      if (!pathRef.current || !pathRef.current.parentElement) {\n        return;\n      }\n\n      const offsets = keyframeOffsets(trajectory);\n      const parent = pathRef.current.parentElement;\n\n      const mask = document.createElementNS('http://www.w3.org/2000/svg', 'mask');\n      mask.setAttribute('id', `${trajectory.id}-mask`);\n      const maskRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      maskRect.setAttribute('x', '0');\n      maskRect.setAttribute('y', '0');\n      maskRect.setAttribute('width', '100%');\n      maskRect.setAttribute('height', '100%');\n      maskRect.setAttribute('fill', 'white');\n      mask.appendChild(maskRect);\n\n      const maskPath = pathRef.current.cloneNode(false) as SVGPathElement;\n      maskPath.classList.add(classes.maskPath);\n      const pathStrokeWidth = pathRef.current.getAttribute('stroke-width');\n      if (pathStrokeWidth) {\n        maskPath.setAttribute('stroke-width', (parseFloat(pathStrokeWidth) - 0.1).toString());\n      }\n      mask.appendChild(maskPath);\n      parent.appendChild(mask);\n\n      const highlight = pathRef.current.cloneNode(false) as SVGPathElement;\n      highlight.removeAttribute('mask');\n      highlight.classList.add(classes.highlight);\n      parent.appendChild(highlight);\n\n      pathRef.current.animate(\n        offsets.map(offset => ({\n          offset: offset,\n          strokeDashoffset: 2 - offset,\n        })),\n        {\n          duration: animationDuration(trajectory, animationScale),\n          easing: 'linear',\n          fill: 'forwards',\n        },\n      );\n\n      return () => {\n        highlight.remove();\n        mask.remove();\n      };\n    }, [trajectory, classes.highlight, classes.maskPath]);\n\n    return (\n      <g>\n        <TrajectoryComponent ref={pathRef} {...props} mask={`url(#${trajectory.id}-mask)`} />\n      </g>\n    );\n  };\n}\n\nfunction keyframeOffsets(traj: Trajectory): number[] {\n  const { segments } = traj;\n  const totalDuration = segments[segments.length - 1].t - segments[0].t;\n  return traj.segments.map(seg => (seg.t - segments[0].t) / totalDuration);\n}\n\nconst useFillStyles = makeStyles(() => ({\n  anim: {\n    opacity: 0.8,\n    strokeDasharray: 2,\n    strokeDashoffset: 2,\n  },\n  highlight: {\n    opacity: 0.4,\n  },\n}));\n\nconst useFollowStyles = makeStyles(() => ({\n  anim: {\n    opacity: 0.8,\n    strokeDashoffset: 2,\n  },\n  highlight: {\n    opacity: 0.4,\n  },\n}));\n\nconst useOutlineStyles = makeStyles(() => ({\n  highlight: {\n    opacity: 0.25,\n  },\n\n  maskPath: {\n    stroke: 'black',\n    opacity: 1,\n  },\n}));\n\nfunction animationDuration(traj: Trajectory, scale: number): number {\n  return (traj.segments[traj.segments.length - 1].t - traj.segments[0].t) / scale;\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst doorStyles = makeStyles(() => ({\n  doorMarker: {\n    cursor: 'pointer',\n    pointerEvents: 'auto',\n  },\n  door: {\n    strokeWidth: '0.2',\n  },\n  undefinedDoor: {\n    stroke: 'grey',\n  },\n  doorOpen: {\n    stroke: '#AFDDAE',\n    strokeDasharray: 0.1,\n  },\n  doorClose: {\n    stroke: '#BC4812',\n  },\n  doorProcess: {\n    stroke: '#E9CE9F',\n    strokeDasharray: 0.3,\n  },\n  doorTransparent: {\n    stroke: 'transparent',\n  },\n}));\n\nexport default doorStyles;\n","import React from 'react';\nimport doorStyles from './door-style';\n\nexport interface defaultDoorProps {\n  v1: number[];\n  v2: number[];\n  style?: string;\n  onClick?(e: React.MouseEvent<SVGGElement>): void;\n}\n\nconst DefaultDoor = function(props: defaultDoorProps): React.ReactElement {\n  const { v1, v2, style, onClick } = props;\n  const [v1_x, v1_y] = v1;\n  const [v2_x, v2_y] = v2;\n  const classes = doorStyles();\n\n  return (\n    <g onClick={event => onClick && onClick(event)}>\n      <line\n        className={`${classes.doorMarker} ${classes.door} ${style ? style : classes.undefinedDoor}`}\n        x1={v1_x}\n        y1={v1_y}\n        x2={v2_x}\n        y2={v2_y}\n      />\n    </g>\n  );\n};\n\nexport default DefaultDoor;\n","import React from 'react';\nimport doorStyles from './door-style';\nimport { DoorProps, getDoorStyle } from './door';\nimport DefaultDoor from './door-default';\n\n/*\n * Single hinge doors:\n *  - hinge is located at (v1_x, v1_y)\n *  - door extends till (v2_x, v2_y)\n *  - motion_range = door swing range in DEGREES\n *  - there are two possible motions: clockwise and anti-clockwise\n *  - selected by the motion_direction parameter, which is +1 or -1\n */\nconst SingleHingeDoor = function(props: DoorProps): React.ReactElement {\n  const { currentMode, onClick, v1, v2 } = props;\n  const [v1_x, v1_y] = v1;\n  const [v2_x, v2_y] = v2;\n  const [hingeX, hingeY, extendX, extendY] = [v1_x, v1_y, v2_x, v2_y];\n  const classes = doorStyles();\n\n  return (\n    <>\n      <DefaultDoor\n        v1={[hingeX, -hingeY]}\n        v2={[extendX, -extendY]}\n        style={getDoorStyle(classes, currentMode)}\n      />\n      <DefaultDoor\n        v1={[hingeX, -hingeY]}\n        v2={[extendX, -extendY]}\n        style={classes.doorTransparent}\n        onClick={onClick}\n      />\n    </>\n  );\n};\n\nexport default SingleHingeDoor;\n","import React from 'react';\nimport { DoorProps } from './door';\nimport SingleHingeDoor from './door-single-hinge';\n\n/**\n * Double hinge doors:\n * - hinges are located at both (v1_x, v1_y) and (v2_x, v2_y)\n * - motion range = door swing ranges in DEGREES (assume symmetric)\n * - same motion-direction selection as single hinge\n */\nconst DoubleHingeDoor = function(props: DoorProps): React.ReactElement {\n  const { door, v1, v2, onClick, currentMode } = props;\n  const [v1_x, v1_y] = v1;\n  const [v2_x, v2_y] = v2;\n  const [hingeX1, hingeY1, hingeX2, hingeY2] = [v1_x, v1_y, v2_x, v2_y];\n  const [extendX1, extendY1] = [hingeX1 + (v2_x - v1_x) / 2, hingeY1 + (v2_y - v1_y) / 2];\n  return (\n    <>\n      <SingleHingeDoor\n        v1={[hingeX1, hingeY1]}\n        v2={[extendX1, extendY1]}\n        door={door}\n        onClick={onClick}\n        currentMode={currentMode}\n      />\n      <SingleHingeDoor\n        v1={[extendX1, extendY1]}\n        v2={[hingeX2, hingeY2]}\n        door={door}\n        onClick={onClick}\n        currentMode={currentMode}\n      />\n    </>\n  );\n};\n\nexport default DoubleHingeDoor;\n","import React from 'react';\nimport doorStyles from './door-style';\nimport { DoorProps, getDoorStyle } from './door';\nimport DefaultDoor from './door-default';\n\n/*\n * Single sliding doors:\n *  - the door slides from (v2_x, v2_y) towards (v1_x, v1_y)\n *  - range of motion is entire distance from v2->v1. No need to specify.\n */\nconst SingleSlideDoor = function(props: DoorProps): React.ReactElement {\n  const { currentMode, onClick, v1, v2 } = props;\n  const [v1_x, v1_y] = v1;\n  const [v2_x, v2_y] = v2;\n  const [hingeX, hingeY, extendX, extendY] = [v1_x, v1_y, v2_x, v2_y];\n  const classes = doorStyles();\n\n  return (\n    <>\n      <DefaultDoor\n        v1={[hingeX, -hingeY]}\n        v2={[extendX, -extendY]}\n        style={getDoorStyle(classes, currentMode)}\n      />\n      <DefaultDoor\n        v1={[hingeX, -hingeY]}\n        v2={[extendX, -extendY]}\n        style={classes.doorTransparent}\n        onClick={onClick}\n      />\n    </>\n  );\n};\n\nexport default SingleSlideDoor;\n","import React from 'react';\nimport { DoorProps } from './door';\nimport SingleSlideDoor from './door-single-slide';\n\n/*\n * Double sliding doors:\n *  - door panels slide from the centerpoint of v1<->v2 towards v1 and v2\n *  - the door slides from (v2_x, v2_y) towards (v1_x, v1_y)\n */\nconst DoubleSlideDoor = function(props: DoorProps): React.ReactElement {\n  const { door, v1, v2, onClick, currentMode } = props;\n  const [v1_x, v1_y] = v1;\n  const [v2_x, v2_y] = v2;\n  const [hingeX1, hingeY1, hingeX2, hingeY2] = [v1_x, v1_y, v2_x, v2_y];\n  const [extendX1, extendY1] = [hingeX1 + (v2_x - v1_x) / 2, hingeY1 + (v2_y - v1_y) / 2];\n\n  return (\n    <>\n      <SingleSlideDoor\n        v1={[hingeX1, hingeY1]}\n        v2={[extendX1, extendY1]}\n        door={door}\n        onClick={onClick}\n        currentMode={currentMode}\n      />\n      <SingleSlideDoor\n        v1={[extendX1, extendY1]}\n        v2={[hingeX2, hingeY2]}\n        door={door}\n        onClick={onClick}\n        currentMode={currentMode}\n      />\n    </>\n  );\n};\n\nexport default DoubleSlideDoor;\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport DefaultDoor from './door-default';\nimport DoubleHingeDoor from './door-double-hinge';\nimport DoubleSlideDoor from './door-double-slide';\nimport React from 'react';\nimport SingleHingeDoor from './door-single-hinge';\nimport SingleSlideDoor from './door-single-slide';\n\n/**\n * currentMode: Current mode of the door. E.g: 0 = DoorMode.CLOSE.\n * door: Door information provided by the map.\n * doorState: Current state of the door.\n * onClick: Action to trigger on click.\n */\nexport interface DoorContainerProps {\n  onClick?(e: React.MouseEvent<SVGGElement>, door: RomiCore.Door): void;\n  currentMode?: number;\n  door: RomiCore.Door;\n  doorState?: RomiCore.DoorState;\n}\n\nexport interface DoorProps extends Omit<DoorContainerProps, 'onClick'> {\n  v1: number[];\n  v2: number[];\n  onClick?(e: React.MouseEvent<SVGGElement>): void;\n}\n\nexport const getDoorStyle = (classes: any, currentMode: number | undefined) => {\n  const { MODE_OPEN, MODE_MOVING } = RomiCore.DoorMode;\n\n  switch (currentMode) {\n    case MODE_OPEN:\n      return classes.doorOpen;\n    case MODE_MOVING:\n      return classes.doorProcess;\n    default:\n      return classes.doorClose;\n  }\n};\n\nconst Door = React.forwardRef(function(\n  props: DoorContainerProps,\n  ref: React.Ref<SVGGElement>,\n): React.ReactElement {\n  const { door, onClick, currentMode } = props;\n  const {\n    DOOR_TYPE_UNDEFINED,\n    DOOR_TYPE_SINGLE_SLIDING,\n    DOOR_TYPE_DOUBLE_SLIDING,\n    DOOR_TYPE_SINGLE_TELESCOPE,\n    DOOR_TYPE_DOUBLE_TELESCOPE,\n    DOOR_TYPE_SINGLE_SWING,\n    DOOR_TYPE_DOUBLE_SWING,\n  } = RomiCore.Door;\n  const { door_type: doorType } = door;\n  const v1 = [door.v1_x, door.v1_y];\n  const v2 = [door.v2_x, door.v2_y];\n\n  const handleClick = (event: React.MouseEvent<SVGGElement, MouseEvent>) => {\n    onClick && onClick(event, door);\n  };\n\n  return (\n    <>\n      {doorType === DOOR_TYPE_SINGLE_SWING && (\n        <SingleHingeDoor\n          v1={v1}\n          v2={v2}\n          door={door}\n          onClick={handleClick}\n          currentMode={currentMode}\n        />\n      )}\n      {doorType === DOOR_TYPE_DOUBLE_SWING && (\n        <DoubleHingeDoor\n          v1={v1}\n          v2={v2}\n          door={door}\n          onClick={handleClick}\n          currentMode={currentMode}\n        />\n      )}\n      {(doorType === DOOR_TYPE_SINGLE_SLIDING || doorType === DOOR_TYPE_SINGLE_TELESCOPE) && (\n        <SingleSlideDoor\n          v1={v1}\n          v2={v2}\n          door={door}\n          onClick={handleClick}\n          currentMode={currentMode}\n        />\n      )}\n      {(doorType === DOOR_TYPE_DOUBLE_SLIDING || doorType === DOOR_TYPE_DOUBLE_TELESCOPE) && (\n        <DoubleSlideDoor\n          v1={v1}\n          v2={v2}\n          door={door}\n          onClick={handleClick}\n          currentMode={currentMode}\n        />\n      )}\n      {doorType === DOOR_TYPE_UNDEFINED && <DefaultDoor v1={v1} v2={v2} onClick={handleClick} />}\n    </>\n  );\n});\n\nexport default Door;\n","/**\n * TODO: Need door location, (v1_x, v1_y) only defines the location of the hinge, we also need the\n * length and orientation of the door to draw it on the map.\n */\n\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React, { createContext, useContext } from 'react';\nimport { viewBoxFromLeafletBounds } from '../../util/css-utils';\nimport SVGOverlay, { SVGOverlayProps } from './svg-overlay';\n\nimport Door from './door/door';\nexport interface DoorsOverlayProps extends SVGOverlayProps {\n  doors: readonly RomiCore.Door[];\n  onDoorClick?(door: RomiCore.Door): void;\n}\n\nexport default function DoorsOverlay(props: DoorsOverlayProps): React.ReactElement {\n  const { doors, onDoorClick, ...otherProps } = props;\n  const viewBox = viewBoxFromLeafletBounds(props.bounds);\n  const doorsState = useContext(DoorStateContext);\n\n  const getCurrentDoorMode = (doorName: string) => {\n    const currentDoor = doorsState && doorsState[doorName];\n    return currentDoor && currentDoor.current_mode.value;\n  };\n  return (\n    <>\n      <SVGOverlay {...otherProps}>\n        <svg viewBox={viewBox}>\n          {doors.map(door => (\n            <Door\n              key={`building-door-${door.name}`}\n              door={door}\n              onClick={(_, door) => onDoorClick && onDoorClick(door)}\n              doorState={doorsState && doorsState[door.name]}\n              currentMode={getCurrentDoorMode(door.name)}\n            />\n          ))}\n        </svg>\n      </SVGOverlay>\n    </>\n  );\n}\n\nexport const DoorStateContext = createContext<Readonly<Record<string, RomiCore.DoorState>>>({});\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nexport interface ArrowProps {\n  x: number;\n  y: number;\n  size?: number;\n  strokeWidth?: number;\n  padding?: number[];\n}\n/**\n * x1, y1: upper vertex of the triangle\n * x2, y2: left vertex of the triangle\n * x3, y3: right vertex of the triangle\n */\nexport interface BaseArrowProps {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n  x3: number;\n  y3: number;\n  strokeWidth?: number;\n  padding?: number[];\n}\n\nexport const DownArrow = (props: ArrowProps) => {\n  const { x, y, size = 1, strokeWidth = 0.01, padding } = props;\n  let x2: number, y2: number, x3: number, y3: number;\n  x2 = x - (x / 2) * size;\n  y2 = y < 0 ? y + y * size : y - y * size;\n  x3 = x + (x / 2) * size;\n  y3 = y2;\n  return (\n    <Arrow\n      x1={x}\n      y1={y}\n      x2={x2}\n      y2={y2}\n      x3={x3}\n      y3={y3}\n      strokeWidth={strokeWidth}\n      padding={padding}\n    />\n  );\n};\n\nexport const UpArrow = (props: ArrowProps) => {\n  const { x, y, size = 1, strokeWidth, padding } = props;\n  let x2: number, y2: number, x3: number, y3: number;\n  x2 = x - (x / 2) * size;\n  y2 = y < 0 ? y - y * size : y + y * size;\n  x3 = x + (x / 2) * size;\n  y3 = y2;\n  return (\n    <Arrow\n      x1={x}\n      y1={y}\n      x2={x2}\n      y2={y2}\n      x3={x3}\n      y3={y3}\n      strokeWidth={strokeWidth}\n      padding={padding}\n    />\n  );\n};\n\n/**\n * To represent an arrow we a triangle. To build that triangle we use a SVG polygon element.\n */\nexport const Arrow = (props: BaseArrowProps) => {\n  const { x1, y1, x2, y2, x3, y3, strokeWidth, padding = [0, 0] } = props;\n  const classes = useStyles();\n  return (\n    <polygon\n      points={\n        `${x1 + padding[0]},${y1 + padding[1]} ` +\n        `${x2 + padding[0]},${y2 + padding[1]} ` +\n        `${x3 + padding[0]},${y3 + padding[1]}`\n      }\n      strokeWidth={strokeWidth}\n      className={classes.arrow}\n    />\n  );\n};\n\nconst useStyles = makeStyles(() => ({\n  arrow: {\n    fill: 'black',\n  },\n}));\n","import { makeStyles } from '@material-ui/core';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React from 'react';\nimport Door from './door/door';\nimport { UpArrow, DownArrow } from './arrow';\nimport { radiansToDegrees } from '../../util/angle-calculation';\n\nexport interface LiftProps {\n  currentFloor: string;\n  lift: RomiCore.Lift;\n  liftState?: RomiCore.LiftState;\n  onClick?(e: React.MouseEvent<SVGGElement>, lift: RomiCore.Lift): void;\n}\n\n/**\n * Gets the style to apply to the lift, the styles depend on the current mode of the lift.\n * @param classes contains all possibles styles of an elevator\n * @param currentMode current mode of the elevator\n * @param isInCurrentFloor if the lift is in the current floor return true.\n */\nconst getLiftStyle = (classes: any, currentMode: number | undefined, isInCurrentFloor: boolean) => {\n  const {\n    MODE_AGV,\n    MODE_EMERGENCY,\n    MODE_FIRE,\n    MODE_HUMAN,\n    MODE_OFFLINE,\n    MODE_UNKNOWN,\n  } = RomiCore.LiftState;\n  const isModeAGV = currentMode === MODE_AGV;\n  const isModeHuman = currentMode === MODE_HUMAN;\n\n  if (currentMode === MODE_EMERGENCY) return classes.emergency;\n  if (currentMode === MODE_FIRE) return classes.fire;\n  if (currentMode === MODE_OFFLINE) return classes.offLine;\n  if (isInCurrentFloor && isModeAGV) return classes.liftOnCurrentFloor;\n  if (isInCurrentFloor && isModeHuman) return classes.humanMode;\n  if (isInCurrentFloor && currentMode === MODE_UNKNOWN) return classes.unknownLift;\n  if (!isInCurrentFloor) return classes.liftMoving;\n};\n\n// Gets the text to insert to the lift, the text depend on the current mode, motion state and the\n// current and destination floor of the lift.\nconst getLiftModeText = (currentMode: number | undefined) => {\n  const { MODE_EMERGENCY, MODE_FIRE, MODE_OFFLINE } = RomiCore.LiftState;\n  if (currentMode === MODE_FIRE) return 'FIRE!';\n  if (currentMode === MODE_EMERGENCY) return 'EMERGENCY!';\n  if (currentMode === MODE_OFFLINE) return 'OFFLINE';\n};\n\nconst getLiftMotionText = (\n  currentFloor: string | undefined,\n  destinationFloor: string | undefined,\n  motionState: number | undefined,\n) => {\n  const { MOTION_DOWN, MOTION_UP, MOTION_STOPPED, MOTION_UNKNOWN } = RomiCore.LiftState;\n  if (motionState === MOTION_UNKNOWN) return '?';\n  if (motionState === MOTION_STOPPED) return !!currentFloor ? currentFloor : 'STOPPED';\n  if (motionState === MOTION_UP || motionState === MOTION_DOWN)\n    return `${currentFloor} → ${destinationFloor}`;\n  return 'Floor: ?';\n};\n\n/**\n * Transform coords on the middle of a SVG's Rect to top left coords.\n */\nconst transformMiddleCoordsOfRectToSVGBeginPoint = (\n  x: number,\n  y: number,\n  width: number,\n  depth: number,\n) => {\n  return { x: x - width / 2, y: y + depth / 2 };\n};\n\n/**\n * Get related Y coord starting from top to bottom.\n */\nconst getRelatedYCoord = (topY: number, height: number, percentage: number) => {\n  return topY + height * percentage;\n};\n\nconst Lift = React.forwardRef(function(\n  props: LiftProps,\n  ref: React.Ref<SVGGElement>,\n): React.ReactElement {\n  const { lift, onClick, liftState, currentFloor } = props;\n  const { width, depth, ref_x: x, ref_y: y, ref_yaw, doors } = lift;\n  // The svg start drawing from the top left coordinate, and the backend sends us the middle X,Y so we need to transform that.\n  const { x: topVerticeX, y: topVerticeY } = transformMiddleCoordsOfRectToSVGBeginPoint(\n    x,\n    y,\n    width,\n    depth,\n  );\n  // Since we are working with a plane with positive X and Negative Y we need to change the sign of the y.\n  const contextY = -y;\n  const contextTopVerticeY = -topVerticeY;\n  // Get properties from lift state\n  const currentMode = liftState?.current_mode;\n  const destinationFloor = liftState?.destination_floor;\n  const doorState = liftState?.door_state;\n  const isInCurrentFloor = liftState?.current_floor === currentFloor;\n  const motionState = liftState?.motion_state;\n\n  const classes = useStyles();\n\n  const liftStyle = getLiftStyle(classes, currentMode, isInCurrentFloor);\n  const liftMotionText = getLiftMotionText(liftState?.current_floor, destinationFloor, motionState);\n  const liftModeText = getLiftModeText(currentMode);\n  return (\n    <>\n      <g ref={ref} onClick={e => onClick && onClick(e, lift)}>\n        <rect\n          className={`${classes.liftMarker} ${classes.lift} ${liftStyle}`}\n          width={width}\n          height={depth}\n          x={topVerticeX}\n          y={contextTopVerticeY}\n          rx=\"0.1\"\n          ry=\"0.1\"\n          transform={`rotate(${radiansToDegrees(ref_yaw)}, ${x},${contextY})`}\n        />\n        {liftMotionText && (\n          <text\n            id=\"liftMotion\"\n            className={classes.liftText}\n            x={x}\n            y={getRelatedYCoord(contextTopVerticeY, depth, 0.25)}\n          >\n            {liftMotionText}\n          </text>\n        )}\n        {liftModeText && (\n          <text id=\"liftMode\" className={classes.liftText} x={x} y={contextY}>\n            {liftModeText}\n          </text>\n        )}\n      </g>\n      {motionState === RomiCore.LiftState.MOTION_UP && (\n        <UpArrow x={x} y={contextY} size={0.03} padding={[0, 0.1]} />\n      )}\n      {motionState === RomiCore.LiftState.MOTION_DOWN && (\n        <DownArrow x={x} y={contextY} size={0.03} padding={[0, 0.1]} />\n      )}\n      {doors.map(door => (\n        <Door key={`lift-door-${door.name}`} door={door} currentMode={doorState} />\n      ))}\n    </>\n  );\n});\n\nexport default Lift;\n\nconst useStyles = makeStyles(() => ({\n  liftMarker: {\n    cursor: 'pointer',\n    pointerEvents: 'auto',\n  },\n  lift: {\n    strokeWidth: '0.2',\n  },\n  liftOnCurrentFloor: {\n    fill: 'green',\n    opacity: '70%',\n  },\n  liftMoving: {\n    fill: 'grey',\n    opacity: '70%',\n  },\n  unknownLift: {\n    fill: '#3d3c3c',\n    opacity: '80%',\n  },\n  emergency: {\n    fill: 'red',\n    opacity: '80%',\n  },\n  fire: {\n    fill: '#ff562a',\n    opacity: '80%',\n  },\n  offLine: {\n    fill: 'yellow',\n    opacity: '80%',\n  },\n  humanMode: {\n    fill: '#90dfef',\n    opacity: '80%',\n  },\n  liftText: {\n    dominantBaseline: 'central',\n    textAnchor: 'middle',\n    fontSize: '0.18px',\n    fontWeight: 'bold',\n  },\n}));\n","export function radiansToDegrees(radians: number) {\n    var pi = Math.PI;\n    return radians * (180 / pi);\n}","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport React, { createContext, useContext } from 'react';\nimport { viewBoxFromLeafletBounds } from '../../util/css-utils';\nimport SVGOverlay, { SVGOverlayProps } from './svg-overlay';\nimport Lift from './lift';\n\nexport interface LiftsOverlayProps extends SVGOverlayProps {\n  currentFloor: string;\n  lifts: readonly RomiCore.Lift[];\n  onLiftClick?(lift: RomiCore.Lift): void;\n}\n\nexport default function LiftsOverlay(props: LiftsOverlayProps): React.ReactElement {\n  const { lifts, onLiftClick, currentFloor, ...otherProps } = props;\n  const viewBox = viewBoxFromLeafletBounds(props.bounds);\n  const liftsState = useContext(LiftStateContext);\n  return (\n    <>\n      <SVGOverlay {...otherProps}>\n        <svg viewBox={viewBox}>\n          {lifts.map(lift => (\n            <Lift\n              key={`lift-${lift.name}`}\n              lift={lift}\n              onClick={(_, lift) => onLiftClick && onLiftClick(lift)}\n              liftState={liftsState && liftsState[lift.name]}\n              currentFloor={currentFloor}\n            />\n          ))}\n        </svg>\n      </SVGOverlay>\n    </>\n  );\n}\n\nexport const LiftStateContext = createContext<Readonly<Record<string, RomiCore.LiftState>>>({});\n","import { makeStyles } from '@material-ui/core';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport * as L from 'leaflet';\nimport React from 'react';\nimport { AttributionControl, ImageOverlay, LayersControl, Map as LMap, Pane } from 'react-leaflet';\nimport {\n  Conflict,\n  RobotTrajectoryManager,\n  Trajectory,\n  TrajectoryResponse,\n} from '../../robot-trajectory-manager';\nimport { AnimationSpeed, SettingsContext, TrajectoryAnimation } from '../../settings';\nimport { toBlobUrl } from '../../util';\nimport ColorManager from './colors';\nimport PlacesOverlay from './places-overlay';\nimport RobotTrajectoriesOverlay, { RobotTrajectoryContext } from './robot-trajectories-overlay';\nimport RobotTrajectory from './robot-trajectory';\nimport RobotsOverlay from './robots-overlay';\nimport {\n  withFillAnimation,\n  withFollowAnimation,\n  withOutlineAnimation,\n} from './trajectory-animations';\nimport DoorsOverlay from './doors-overlay';\nimport LiftsOverlay from './lift-overlay';\n\nconst useStyles = makeStyles(() => ({\n  map: {\n    height: '100%',\n    width: '100%',\n    margin: 0,\n    padding: 0,\n  },\n}));\n\ninterface MapFloorLayer {\n  level: RomiCore.Level;\n  imageUrl: string;\n  bounds: L.LatLngBounds;\n}\n\nexport interface ScheduleVisualizerProps {\n  buildingMap: Readonly<RomiCore.BuildingMap>;\n  fleets: Readonly<RomiCore.FleetState[]>;\n  trajManager?: Readonly<RobotTrajectoryManager>;\n  onDoorClick?(door: RomiCore.Door): void;\n  onLiftClick?(lift: RomiCore.Lift): void;\n  onPlaceClick?(place: RomiCore.Place): void;\n  onRobotClick?(robot: RomiCore.RobotState): void;\n}\n\nfunction calcMaxBounds(mapFloorLayers: readonly MapFloorLayer[]): L.LatLngBounds | undefined {\n  if (!mapFloorLayers.length) {\n    return undefined;\n  }\n  const bounds = new L.LatLngBounds([0, 0], [0, 0]);\n  Object.values(mapFloorLayers).forEach(x => bounds.extend(x.bounds));\n  return bounds.pad(0.2);\n}\n\nexport default function ScheduleVisualizer(props: ScheduleVisualizerProps): React.ReactElement {\n  const classes = useStyles();\n  const mapRef = React.useRef<LMap>(null);\n  const { current: mapElement } = mapRef;\n\n  const [mapFloorLayers, setMapFloorLayers] = React.useState<\n    Readonly<Record<string, MapFloorLayer>>\n  >({});\n  const mapFloorLayerSort = React.useMemo<string[]>(\n    () => props.buildingMap.levels.sort((a, b) => a.elevation - b.elevation).map(x => x.name),\n    [props.buildingMap],\n  );\n  const [curLevelName, setCurLevelName] = React.useState(() => mapFloorLayerSort[0]);\n  const curMapFloorLayer = React.useMemo(() => mapFloorLayers[curLevelName], [\n    curLevelName,\n    mapFloorLayers,\n  ]);\n\n  const [trajectories, setTrajectories] = React.useState<Record<string, TrajectoryResponse>>({});\n\n  const initialBounds = React.useMemo<Readonly<L.LatLngBounds> | undefined>(() => {\n    const initialLayer = mapFloorLayers[mapFloorLayerSort[0]];\n    if (!initialLayer) {\n      return undefined;\n    }\n    return initialLayer.bounds;\n  }, [mapFloorLayers, mapFloorLayerSort]);\n  const [maxBounds, setMaxBounds] = React.useState<Readonly<L.LatLngBounds> | undefined>(() =>\n    calcMaxBounds(Object.values(mapFloorLayers)),\n  );\n\n  const robotsInCurLevel = React.useMemo(() => {\n    if (!curMapFloorLayer) {\n      return [];\n    }\n    return props.fleets.flatMap(x =>\n      x.robots.filter(r => r.location.level_name === curMapFloorLayer.level.name),\n    );\n  }, [props.fleets, curMapFloorLayer]);\n\n  const colorManager = React.useMemo(() => new ColorManager(), []);\n\n  const settings = React.useContext(SettingsContext);\n  const trajLookahead = 60000; // 1 min\n  const trajAnimDuration = React.useMemo(() => {\n    switch (settings.trajectoryAnimationSpeed) {\n      case AnimationSpeed.Slow:\n        return 4000;\n      case AnimationSpeed.Normal:\n        return 2000;\n      case AnimationSpeed.Fast:\n        return 1000;\n    }\n  }, [settings]);\n  const TrajectoryComponent = React.useMemo(() => {\n    const animationScale = trajLookahead / trajAnimDuration;\n    switch (settings.trajectoryAnimation) {\n      case TrajectoryAnimation.None:\n        return RobotTrajectory;\n      case TrajectoryAnimation.Fill:\n        return withFillAnimation(RobotTrajectory, animationScale);\n      case TrajectoryAnimation.Follow:\n        return withFollowAnimation(RobotTrajectory, animationScale);\n      case TrajectoryAnimation.Outline:\n        return withOutlineAnimation(RobotTrajectory, animationScale);\n    }\n  }, [settings.trajectoryAnimation, trajAnimDuration]);\n\n  React.useEffect(() => {\n    if (!mapElement) {\n      return;\n    }\n\n    // We need the image to be loaded to know the bounds, but the image cannot be loaded without a\n    // bounds, it is possible to use a temporary bounds but that would cause the viewport to move\n    // when we replace the temporary bounds. A solution is to load the image in a temporary HTML\n    // image element, then load the ImageOverlay in leaflet, the downside is that the image gets\n    // loaded twice.\n    (async () => {\n      const promises: Promise<any>[] = [];\n      const mapFloorLayers: Record<string, MapFloorLayer> = {};\n      for (const level of props.buildingMap.levels) {\n        const image = level.images[0]; // when will there be > 1 image?\n        if (!image) {\n          continue;\n        }\n\n        promises.push(\n          new Promise(res => {\n            const imageElement = new Image();\n            const imageUrl = toBlobUrl(image.data);\n            imageElement.src = imageUrl;\n\n            const listener = () => {\n              imageElement.removeEventListener('load', listener);\n              const width = imageElement.naturalWidth * image.scale;\n              const height = imageElement.naturalHeight * image.scale;\n              // TODO: support both svg and image\n              // const svgElement = rawCompressedSVGToSVGSVGElement(image.data);\n              // const height = (svgElement.height.baseVal.value * scale) / IMAGE_SCALE;\n              // const width = (svgElement.width.baseVal.value * scale) / IMAGE_SCALE;\n\n              const bounds = new L.LatLngBounds(\n                [image.y_offset, image.x_offset],\n                [image.y_offset - height, image.x_offset + width],\n              );\n\n              mapFloorLayers[level.name] = {\n                level: level,\n                imageUrl: imageUrl,\n                bounds: bounds,\n              };\n              res();\n            };\n            imageElement.addEventListener('load', listener);\n          }),\n        );\n      }\n\n      for (const p of promises) {\n        await p;\n      }\n      setMapFloorLayers(mapFloorLayers);\n      setMaxBounds(calcMaxBounds(Object.values(mapFloorLayers)));\n    })();\n  }, [props.buildingMap, mapElement]);\n\n  React.useEffect(() => {\n    let interval: number;\n    (async () => {\n      const trajManager = props.trajManager;\n\n      async function updateTrajectory() {\n        if (!curMapFloorLayer || !trajManager) {\n          return;\n        }\n        const resp = await trajManager.latestTrajectory({\n          request: 'trajectory',\n          param: {\n            map_name: curMapFloorLayer.level.name,\n            duration: trajLookahead,\n            trim: true,\n          },\n        });\n        setTrajectories(prev => ({\n          ...prev,\n          [curMapFloorLayer.level.name]: resp,\n        }));\n      }\n\n      await updateTrajectory();\n      interval = window.setInterval(updateTrajectory, trajAnimDuration);\n    })();\n    return () => clearInterval(interval);\n  }, [props.trajManager, curMapFloorLayer, trajAnimDuration]);\n\n  function handleBaseLayerChange(e: L.LayersControlEvent): void {\n    setCurLevelName(e.name);\n  }\n\n  function getTrajectory(levelName: string): Trajectory[] {\n    const resp = trajectories[levelName];\n    return resp ? resp.values : [];\n  }\n\n  function getConflicts(levelName: string): Conflict[] {\n    const resp = trajectories[levelName];\n    return resp ? resp.conflicts : [];\n  }\n\n  const sortedMapFloorLayers = mapFloorLayerSort.map(x => mapFloorLayers[x]);\n  const ref = React.useRef<ImageOverlay>(null);\n\n  if (ref.current) {\n    ref.current.leafletElement.setZIndex(0);\n  }\n\n  return (\n    <LMap\n      ref={mapRef}\n      className={classes.map}\n      attributionControl={false}\n      crs={L.CRS.Simple}\n      minZoom={4}\n      maxZoom={8}\n      zoomDelta={0.5}\n      zoomSnap={0.5}\n      bounds={initialBounds}\n      maxBounds={maxBounds}\n      onbaselayerchange={handleBaseLayerChange}\n    >\n      <AttributionControl position=\"bottomright\" prefix=\"OSRC-SG\" />\n      <LayersControl position=\"topleft\">\n        {sortedMapFloorLayers.every(x => x) &&\n          sortedMapFloorLayers.map((floorLayer, i) => (\n            <LayersControl.BaseLayer\n              checked={i === 0}\n              name={floorLayer.level.name}\n              key={floorLayer.level.name}\n            >\n              <ImageOverlay bounds={floorLayer.bounds} url={floorLayer.imageUrl} ref={ref} />\n            </LayersControl.BaseLayer>\n          ))}\n        <LayersControl.Overlay name=\"Places\" checked>\n          {curMapFloorLayer && (\n            <Pane>\n              <PlacesOverlay\n                bounds={curMapFloorLayer.bounds}\n                places={curMapFloorLayer.level.places}\n                onPlaceClick={props.onPlaceClick}\n              />\n            </Pane>\n          )}\n        </LayersControl.Overlay>\n        <LayersControl.Overlay name=\"Robot Trajectories\" checked>\n          {curMapFloorLayer && (\n            <Pane>\n              <RobotTrajectoryContext.Provider value={{ Component: TrajectoryComponent }}>\n                <RobotTrajectoriesOverlay\n                  bounds={curMapFloorLayer.bounds}\n                  trajs={getTrajectory(curMapFloorLayer.level.name)}\n                  conflicts={getConflicts(curMapFloorLayer.level.name)}\n                  colorManager={colorManager}\n                />\n              </RobotTrajectoryContext.Provider>\n            </Pane>\n          )}\n        </LayersControl.Overlay>\n        <LayersControl.Overlay name=\"Doors\" checked>\n          {curMapFloorLayer && (\n            <Pane>\n              <DoorsOverlay\n                bounds={curMapFloorLayer.bounds}\n                doors={curMapFloorLayer.level.doors}\n                onDoorClick={props.onDoorClick}\n              />\n            </Pane>\n          )}\n        </LayersControl.Overlay>\n        <LayersControl.Overlay name=\"Lifts\" checked>\n          {curMapFloorLayer && (\n            <Pane>\n              <LiftsOverlay\n                bounds={curMapFloorLayer.bounds}\n                currentFloor={curLevelName}\n                lifts={props.buildingMap.lifts}\n                onLiftClick={props.onLiftClick}\n              />\n            </Pane>\n          )}\n        </LayersControl.Overlay>\n        <LayersControl.Overlay name=\"Robots\" checked>\n          {curMapFloorLayer && (\n            <Pane>\n              <RobotsOverlay\n                bounds={curMapFloorLayer.bounds}\n                robots={robotsInCurLevel}\n                colorManager={colorManager}\n                onRobotClick={props.onRobotClick}\n              />\n            </Pane>\n          )}\n        </LayersControl.Overlay>\n      </LayersControl>\n    </LMap>\n  );\n}\n","import {\n  Divider,\n  Drawer,\n  DrawerProps,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  makeStyles,\n  Radio,\n  RadioGroup,\n} from '@material-ui/core';\nimport React from 'react';\nimport { Settings, TrajectoryAnimation } from '../settings';\n\nexport interface SettingsDrawerProps extends DrawerProps {\n  settings: Readonly<Settings>;\n  onSettingsChange(settings: Settings): void;\n}\n\nexport default function SettingsDrawer(props: SettingsDrawerProps): React.ReactElement {\n  const classes = useStyles();\n  const { settings, onSettingsChange, ...otherProps } = props;\n  const { trajectoryAnimation } = settings;\n\n  const trajAnimsText = React.useMemo(\n    () => Object.keys(TrajectoryAnimation).slice(Object.keys(TrajectoryAnimation).length * 0.5),\n    [],\n  );\n\n  function handleTrajectoryAnimationChange(ev: React.ChangeEvent<HTMLInputElement>): void {\n    const newSettings: Settings = { ...settings, trajectoryAnimation: Number(ev.target.value) };\n    onSettingsChange && onSettingsChange(newSettings);\n  }\n\n  return (\n    <Drawer PaperProps={{ className: classes.drawer }} anchor=\"right\" {...otherProps}>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\" className={classes.legendLabel}>\n          Trajectory Animation\n        </FormLabel>\n        <Divider />\n        <RadioGroup\n          className={classes.trajGroup}\n          value={trajectoryAnimation}\n          onChange={handleTrajectoryAnimationChange}\n        >\n          {trajAnimsText.map((text, i) => (\n            <FormControlLabel\n              key={i}\n              className={classes.flexBasis}\n              value={i}\n              control={<Radio />}\n              label={text}\n            />\n          ))}\n        </RadioGroup>\n      </FormControl>\n    </Drawer>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  drawer: {\n    width: 300,\n  },\n  legendLabel: {\n    fontSize: theme.typography.h6.fontSize,\n    padding: theme.spacing(1),\n  },\n  trajGroup: {\n    flexDirection: 'row',\n    paddingLeft: theme.spacing(2),\n  },\n  flexBasis: {\n    flexBasis: '40%',\n  },\n}));\n","import { AppBar, Fade, IconButton, makeStyles, Toolbar, Typography } from '@material-ui/core/';\nimport { Dashboard as DashboardIcon, Settings as SettingsIcon } from '@material-ui/icons';\nimport * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport debug from 'debug';\nimport React from 'react';\nimport 'typeface-roboto';\nimport { AppConfig } from '../app-config';\nimport DispenserStateManager from '../dispenser-state-manager';\nimport DoorStateManager from '../door-state-manager';\nimport FleetManager from '../fleet-manager';\nimport LiftStateManager from '../lift-state-manager';\nimport { RobotTrajectoryManager } from '../robot-trajectory-manager';\nimport { loadSettings, saveSettings, Settings, SettingsContext } from '../settings';\nimport './app.css';\nimport DispensersPanel from './dispensers-panel';\nimport DoorsPanel from './doors-panel';\nimport LiftsPanel from './lifts-panel';\nimport LoadingScreen, { LoadingScreenProps } from './loading-screen';\nimport MainMenu from './main-menu';\nimport OmniPanel from './omni-panel';\nimport OmniPanelView from './omni-panel-view';\nimport PlacesPanel from './places-panel';\nimport RobotsPanel from './robots-panel';\nimport ScheduleVisualizer from './schedule-visualizer';\nimport SettingsDrawer from './settings-drawer';\nimport { SpotlightValue } from './spotlight-value';\nimport { DoorStateContext } from './schedule-visualizer/doors-overlay';\nimport { LiftStateContext } from './schedule-visualizer/lift-overlay';\n\nconst borderRadius = 20;\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexFlow: 'column',\n    height: '100%',\n  },\n  toolBarTitle: {\n    flexGrow: 1,\n  },\n  omniPanel: {\n    position: 'fixed',\n    width: 350,\n    top: 80,\n    right: '1%',\n    bottom: '2%',\n    backgroundColor: theme.palette.background.default,\n    zIndex: 1024,\n    borderTopLeftRadius: borderRadius,\n    borderTopRightRadius: borderRadius,\n    boxShadow: theme.shadows[12],\n  },\n  topLeftBorder: {\n    borderTopLeftRadius: borderRadius,\n  },\n  topRightBorder: {\n    borderTopRightRadius: borderRadius,\n  },\n}));\n\nexport interface AppProps {\n  appConfig: AppConfig;\n}\n\nenum OmniPanelViewIndex {\n  MainMenu = 0,\n  Doors,\n  Lifts,\n  Robots,\n  Places,\n  Dispensers,\n}\n\nclass ViewMapNode {\n  constructor(public value: OmniPanelViewIndex, public parent?: ViewMapNode) {}\n\n  addChild(view: OmniPanelViewIndex): ViewMapNode {\n    return new ViewMapNode(view, this);\n  }\n}\n\ntype ViewMap = { [key: number]: ViewMapNode };\n\nfunction makeViewMap(): ViewMap {\n  const viewMap: ViewMap = {};\n  const root = new ViewMapNode(OmniPanelViewIndex.MainMenu);\n  viewMap[OmniPanelViewIndex.MainMenu] = root;\n  viewMap[OmniPanelViewIndex.Doors] = root.addChild(OmniPanelViewIndex.Doors);\n  viewMap[OmniPanelViewIndex.Lifts] = root.addChild(OmniPanelViewIndex.Lifts);\n  viewMap[OmniPanelViewIndex.Robots] = root.addChild(OmniPanelViewIndex.Robots);\n  viewMap[OmniPanelViewIndex.Places] = root.addChild(OmniPanelViewIndex.Places);\n  viewMap[OmniPanelViewIndex.Dispensers] = root.addChild(OmniPanelViewIndex.Dispensers);\n  return viewMap;\n}\n\nconst viewMap = makeViewMap();\n\nexport default function App(props: AppProps): JSX.Element {\n  const classes = useStyles();\n  const { transportFactory, trajectoryManagerFactory } = props.appConfig;\n  const [transport, setTransport] = React.useState<RomiCore.Transport | undefined>(undefined);\n  const [buildingMap, setBuildingMap] = React.useState<RomiCore.BuildingMap | undefined>(undefined);\n  const trajManager = React.useRef<RobotTrajectoryManager | undefined>(undefined);\n\n  const doorStateManager = React.useMemo(() => new DoorStateManager(), []);\n  const [doorStates, setDoorStates] = React.useState(() => doorStateManager.doorStates());\n  const [doors, setDoors] = React.useState<readonly RomiCore.Door[]>([]);\n\n  const [doorSpotlight, setDoorSpotlight] = React.useState<SpotlightValue<string> | undefined>(\n    undefined,\n  );\n\n  const liftStateManager = React.useMemo(() => new LiftStateManager(), []);\n  const [liftStates, setLiftStates] = React.useState(() => liftStateManager.liftStates());\n\n  const [lifts, setLifts] = React.useState<readonly RomiCore.Lift[]>([]);\n  const [liftSpotlight, setLiftSpotlight] = React.useState<SpotlightValue<string> | undefined>(\n    undefined,\n  );\n\n  const fleetManager = React.useMemo(() => new FleetManager(), []);\n  const [fleets, setFleets] = React.useState(fleetManager.fleets());\n  const [robotSpotlight, setRobotSpotlight] = React.useState<SpotlightValue<string> | undefined>(\n    undefined,\n  );\n\n  const [placeSpotlight, setPlaceSpotlight] = React.useState<SpotlightValue<string> | undefined>(\n    undefined,\n  );\n\n  const dispenserStateManager = React.useMemo(() => new DispenserStateManager(), []);\n  const [dispenserStates, setDispenserStates] = React.useState<\n    Readonly<Record<string, RomiCore.DispenserState>>\n  >({});\n  const [dispenserSpotlight, setDispenserSpotlight] = React.useState<\n    SpotlightValue<string> | undefined\n  >(undefined);\n\n  const [showOmniPanel, setShowOmniPanel] = React.useState(true);\n  const [currentView, setCurrentView] = React.useState(OmniPanelViewIndex.MainMenu);\n  const [loading, setLoading] = React.useState<LoadingScreenProps | null>({\n    caption: 'Connecting to SOSS...',\n  });\n\n  const [showSettings, setShowSettings] = React.useState(false);\n  const [settings, setSettings] = React.useState<Settings>(() => loadSettings());\n\n  React.useEffect(() => {\n    setLoading({ caption: 'Connecting to SOSS server...' });\n    transportFactory()\n      .then(x => {\n        x.on('error', console.error);\n        x.once('close', () => {\n          setLoading({ caption: 'Lost connection to SOSS', variant: 'error' });\n          setTransport(undefined);\n        });\n        doorStateManager.startSubscription(x);\n        dispenserStateManager.startSubscription(x);\n        liftStateManager.startSubscription(x);\n        fleetManager.startSubscription(x);\n\n        fleetManager.on('updated', () => setFleets(fleetManager.fleets()));\n        liftStateManager.on('updated', () => setLiftStates(liftStateManager.liftStates()));\n        doorStateManager.on('updated', () => setDoorStates(doorStateManager.doorStates()));\n        setTransport(x);\n      })\n      .catch((e: CloseEvent) => {\n        setLoading({ caption: `Unable to connect to SOSS server (${e.code})`, variant: 'error' });\n      });\n  }, [transportFactory, doorStateManager, liftStateManager, dispenserStateManager, fleetManager]);\n\n  React.useEffect(() => {\n    if (!transport) {\n      return;\n    }\n    setLoading({ caption: 'Downloading building map...' });\n    const request = new RomiCore.GetBuildingMap_Request();\n    transport\n      .call(RomiCore.getBuildingMap, request)\n      .then(result => {\n        setBuildingMap(result.building_map);\n        setLoading(null);\n      })\n      .catch(() => {\n        setLoading({ caption: 'Unable to download building map', variant: 'error' });\n      });\n  }, [transport]);\n\n  React.useEffect(() => {\n    if (!trajectoryManagerFactory) {\n      return;\n    }\n    (async () => {\n      trajManager.current = await trajectoryManagerFactory();\n    })();\n  }, [trajectoryManagerFactory]);\n\n  React.useEffect(() => {\n    if (currentView === OmniPanelViewIndex.Doors) {\n      const listener = () => setDoorStates(doorStateManager.doorStates());\n      doorStateManager.on('updated', listener);\n      debug.log('started tracking door states');\n      return () => {\n        doorStateManager.off('updated', listener);\n        debug.log('stopped tracking door states');\n      };\n    }\n  }, [currentView, doorStateManager]);\n\n  React.useEffect(() => {\n    if (currentView === OmniPanelViewIndex.Lifts) {\n      const listener = () => setLiftStates(liftStateManager.liftStates());\n      liftStateManager.on('updated', listener);\n      debug.log('started tracking lift states');\n      return () => {\n        liftStateManager.off('updated', listener);\n        debug.log('stopped tracking lift states');\n      };\n    }\n  }, [currentView, liftStateManager]);\n\n  React.useEffect(() => {\n    if (currentView === OmniPanelViewIndex.Dispensers) {\n      const listener = () => setDispenserStates(dispenserStateManager.dispenserStates());\n      dispenserStateManager.on('updated', listener);\n      debug.log('started tracking dispenser states');\n      return () => {\n        dispenserStateManager.off('updated', listener);\n        debug.log('stopped tracking dispenser states');\n      };\n    }\n  }, [currentView, dispenserStateManager]);\n\n  React.useEffect(() => {\n    setDoors(buildingMap ? buildingMap.levels.flatMap(x => x.doors) : []);\n    setLifts(buildingMap ? buildingMap.lifts : []);\n  }, [buildingMap]);\n\n  function handlePlaceClick(place: RomiCore.Place): void {\n    setShowOmniPanel(true);\n    setCurrentView(OmniPanelViewIndex.Places);\n    setPlaceSpotlight({ value: place.name });\n  }\n\n  function handleDoorClick(door: RomiCore.Door): void {\n    setShowOmniPanel(true);\n    setCurrentView(OmniPanelViewIndex.Doors);\n    setDoorSpotlight({ value: door.name });\n  }\n\n  function handleRobotClick(robot: RomiCore.RobotState): void {\n    setShowOmniPanel(true);\n    setCurrentView(OmniPanelViewIndex.Robots);\n    setRobotSpotlight({ value: robot.name });\n  }\n\n  function handleLiftClick(lift: RomiCore.Lift): void {\n    setShowOmniPanel(true);\n    setCurrentView(OmniPanelViewIndex.Lifts);\n    setLiftSpotlight({ value: lift.name });\n  }\n\n  function clearSpotlights() {\n    setDoorSpotlight(undefined);\n    setLiftSpotlight(undefined);\n    setRobotSpotlight(undefined);\n    setDispenserSpotlight(undefined);\n  }\n\n  function handleClose() {\n    clearSpotlights();\n    setShowOmniPanel(false);\n  }\n\n  function handleBack(index: number): void {\n    clearSpotlights();\n    const parent = viewMap[index].parent;\n    if (!parent) {\n      return handleClose();\n    }\n    setCurrentView(parent.value);\n  }\n\n  function handleMainMenuDoorsClick(): void {\n    setDoorStates(doorStateManager.doorStates());\n    setCurrentView(OmniPanelViewIndex.Doors);\n  }\n\n  function handleMainMenuLiftsClick(): void {\n    setLiftStates(liftStateManager.liftStates());\n    setCurrentView(OmniPanelViewIndex.Lifts);\n  }\n\n  function handleMainMenuRobotsClick(): void {\n    setCurrentView(OmniPanelViewIndex.Robots);\n  }\n\n  function handleMainMenuPlacesClick(): void {\n    setCurrentView(OmniPanelViewIndex.Places);\n  }\n\n  function handleMainMenuDispensersClick(): void {\n    setCurrentView(OmniPanelViewIndex.Dispensers);\n  }\n\n  return (\n    <React.Fragment>\n      <SettingsContext.Provider value={settings}>\n        {loading && <LoadingScreen {...loading} />}\n        <div className={classes.container}>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h6\" className={classes.toolBarTitle}>\n                Dashboard\n              </Typography>\n              <IconButton color=\"inherit\" onClick={() => setShowOmniPanel(!showOmniPanel)}>\n                <DashboardIcon />\n              </IconButton>\n              <IconButton color=\"inherit\" onClick={() => setShowSettings(true)}>\n                <SettingsIcon />\n              </IconButton>\n            </Toolbar>\n          </AppBar>\n          {buildingMap && (\n            <DoorStateContext.Provider value={doorStates}>\n              <LiftStateContext.Provider value={liftStates}>\n                <ScheduleVisualizer\n                  buildingMap={buildingMap}\n                  fleets={fleets}\n                  trajManager={trajManager.current}\n                  onDoorClick={handleDoorClick}\n                  onLiftClick={handleLiftClick}\n                  onPlaceClick={handlePlaceClick}\n                  onRobotClick={handleRobotClick}\n                />\n              </LiftStateContext.Provider>\n            </DoorStateContext.Provider>\n          )}\n          <Fade in={showOmniPanel}>\n            <OmniPanel\n              className={classes.omniPanel}\n              classes={{\n                backButton: classes.topLeftBorder,\n                closeButton: classes.topRightBorder,\n              }}\n              view={currentView}\n              onBack={handleBack}\n              onClose={handleClose}\n            >\n              <OmniPanelView id={OmniPanelViewIndex.MainMenu}>\n                <MainMenu\n                  onDoorsClick={handleMainMenuDoorsClick}\n                  onLiftsClick={handleMainMenuLiftsClick}\n                  onRobotsClick={handleMainMenuRobotsClick}\n                  onPlacesClick={handleMainMenuPlacesClick}\n                  onDispensersClick={handleMainMenuDispensersClick}\n                />\n              </OmniPanelView>\n              <OmniPanelView id={OmniPanelViewIndex.Doors}>\n                <DoorsPanel\n                  transport={transport}\n                  doorStates={doorStates}\n                  doors={doors}\n                  spotlight={doorSpotlight}\n                />\n              </OmniPanelView>\n              <OmniPanelView id={OmniPanelViewIndex.Lifts}>\n                <LiftsPanel\n                  transport={transport}\n                  liftStates={liftStates}\n                  lifts={lifts}\n                  spotlight={liftSpotlight}\n                />\n              </OmniPanelView>\n              <OmniPanelView id={OmniPanelViewIndex.Robots}>\n                <RobotsPanel transport={transport} fleets={fleets} spotlight={robotSpotlight} />\n              </OmniPanelView>\n              <OmniPanelView id={OmniPanelViewIndex.Places}>\n                {buildingMap && (\n                  <PlacesPanel buildingMap={buildingMap} spotlight={placeSpotlight} />\n                )}\n              </OmniPanelView>\n              <OmniPanelView id={OmniPanelViewIndex.Dispensers}>\n                <DispensersPanel dispenserStates={dispenserStates} spotlight={dispenserSpotlight} />\n              </OmniPanelView>\n            </OmniPanel>\n          </Fade>\n          <SettingsDrawer\n            settings={settings}\n            open={showSettings}\n            onSettingsChange={newSettings => {\n              setSettings(newSettings);\n              saveSettings(newSettings);\n            }}\n            onClose={() => setShowSettings(false)}\n          />\n        </div>\n      </SettingsContext.Provider>\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as L from 'leaflet';\n\nimport './control-positions.css';\n\nexport type ControlPosition = (\n  L.ControlPosition | 'topcenter' | 'bottomcenter' | 'leftcenter' | 'rightcenter' | 'center'\n);\n\nexport function extendControlPositions() {\n  // Implement feature from this PR: https://github.com/Leaflet/Leaflet/pull/5554\n  const origInitControlPos = (L.Map as any).prototype._initControlPos;\n  L.Map.include({\n    _initControlPos() {\n      origInitControlPos.call(this);\n      this._controlCorners['topcenter'] = L.DomUtil.create(\n        'div',\n        'leaflet-top leaflet-horizontal-center',\n        this._controlContainer,\n      );\n      this._controlCorners['bottomcenter'] = L.DomUtil.create(\n        'div',\n        'leaflet-bottom leaflet-horizontal-center',\n        this._controlContainer,\n      );\n      this._controlCorners['leftcenter'] = L.DomUtil.create(\n        'div',\n        'leaflet-left leaflet-vertical-center',\n        this._controlContainer,\n      );\n      this._controlCorners['rightcenter'] = L.DomUtil.create(\n        'div',\n        'leaflet-right leaflet-vertical-center',\n        this._controlContainer,\n      );\n      this._controlCorners['center'] = L.DomUtil.create(\n        'div',\n        'leaflet-horizontal-center leaflet-vertical-center',\n        this._controlContainer,\n      );\n    },\n  });\n}","import 'leaflet/dist/leaflet.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport appConfig from './app-config';\nimport App from './components/app';\nimport { extendControlPositions } from './leaflet/control-positions';\nimport * as serviceWorker from './serviceWorker';\n\nextendControlPositions();\n\nReactDOM.render(<App appConfig={appConfig} />, document.getElementById('root'));\n\n// NOTE: There is no point to have the app work offline as all the data must come from rmf/romi and\n// cannot be cached.\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import * as RomiCore from '@osrf/romi-js-core-interfaces';\nimport airportPngUrl from './airport_terminal.png';\nimport officePngUrl from './office.png';\n\nexport default async function buildingMap(): Promise<RomiCore.BuildingMap> {\n  let officePng: Uint8Array;\n  let airportPng: Uint8Array;\n  if (process.env.NODE_ENV === 'test') {\n    const fs = await import('fs');\n    officePng = fs.readFileSync(`${__dirname}/office.png`);\n    airportPng = fs.readFileSync(`${__dirname}/airport_terminal.png`);\n  } else {\n    const officePngResp = await fetch(officePngUrl);\n    officePng = new Uint8Array(await officePngResp.arrayBuffer());\n    const airportPngResp = await fetch(airportPngUrl);\n    airportPng = new Uint8Array(await airportPngResp.arrayBuffer());\n  }\n\n  const doors = [\n    {\n      name: 'main_door',\n      v1_x: 8.2,\n      v1_y: -5.5,\n      v2_x: 7.85,\n      v2_y: -6.2,\n      door_type: 2,\n      motion_range: -1.571,\n      motion_direction: 1,\n    },\n    {\n      name: 'hardware_door',\n      v1_x: 4.9,\n      v1_y: -4,\n      v2_x: 4.4,\n      v2_y: -5,\n      door_type: 1,\n      motion_range: 1.571,\n      motion_direction: -1,\n    },\n    {\n      name: 'coe_door',\n      v1_x: 19.5,\n      v1_y: -10.8,\n      v2_x: 19.5,\n      v2_y: -9.9,\n      door_type: 1,\n      motion_range: 1.571,\n      motion_direction: 1,\n    },\n    {\n      name: 'exit_door',\n      v1_x: 12.2,\n      v1_y: -2.7,\n      v2_x: 14.1,\n      v2_y: -2.7,\n      door_type: 1,\n      motion_range: -1.571,\n      motion_direction: 1,\n    },\n  ];\n\n  const lifts = [\n    {\n      name: 'Lift1',\n      doors: [{\n        name: 'lift1_front_door',\n        v1_x: 8.80,\n        v1_y: -2.3,\n        v2_x: 7.70,\n        v2_y: -4.5,\n        door_type: 1,\n        motion_range: 0,\n        motion_direction: 1,\n      }],\n      levels: ['L1', 'L2', 'L3'],\n      ref_x: 7.1,\n      ref_y: -2.8,\n      ref_yaw: 0.5,\n      width: 2.5,\n      depth: 2.5,\n      wall_graph: {\n        name: 'wallgraph',\n        vertices: [],\n        edges: [],\n        params: [],\n      },\n    },\n    {\n      name: 'Lift2',\n      doors: [\n        {\n          name: 'lift2_front_door',\n          v1_x: 8.95,\n          v1_y: -12.38,\n          v2_x: 10.08,\n          v2_y: -12.38,\n          door_type: 1,\n          motion_range: 0,\n          motion_direction: 1,\n        }\n      ],\n      levels: ['L1', 'L2', 'L3', 'L4'],\n      ref_x: 9.5,\n      ref_y: -13,\n      ref_yaw: 1.571,\n      width: 1,\n      depth: 1,\n      wall_graph: {\n        name: 'wallgraph',\n        vertices: [],\n        edges: [],\n        params: [],\n      },\n    },\n    {\n      name: 'mysterious_lift',\n      doors: [],\n      levels: ['L1', 'L2', 'L3', 'L4'],\n      ref_x: 22,\n      ref_y: -10,\n      ref_yaw: 1.571,\n      width: 1,\n      depth: 1,\n      wall_graph: {\n        name: 'wallgraph',\n        vertices: [],\n        edges: [],\n        params: [],\n      },\n    },\n  ];\n\n  return {\n    name: 'test building',\n    levels: [\n      {\n        name: 'L1',\n        elevation: 0,\n        images: [\n          {\n            data: officePng,\n            encoding: 'png',\n            name: 'office',\n            scale: 0.008465494960546494,\n            x_offset: 0,\n            y_offset: 0,\n            yaw: 0,\n          },\n        ],\n        places: [\n          {\n            name: 'Place1',\n            x: 2,\n            y: -2,\n            yaw: 0,\n            position_tolerance: 0,\n            yaw_tolerance: 0,\n          },\n          {\n            name: 'Place2',\n            x: 8,\n            y: -4,\n            yaw: 0,\n            position_tolerance: 0,\n            yaw_tolerance: 0,\n          },\n        ],\n        doors: doors,\n        nav_graphs: [],\n        wall_graph: {\n          name: 'wallgraph',\n          vertices: [],\n          edges: [],\n          params: [],\n        },\n      },\n      {\n        name: 'Airport Terminal',\n        elevation: 10,\n        doors: [],\n        images: [\n          {\n            data: airportPng,\n            encoding: 'png',\n            name: 'airport_terminal',\n            scale: 0.08212187141180038,\n            x_offset: 0,\n            y_offset: 0,\n            yaw: 0,\n          },\n        ],\n        nav_graphs: [],\n        places: [],\n        wall_graph: {\n          name: 'wallgraph',\n          vertices: [],\n          edges: [],\n          params: [],\n        },\n      },\n    ],\n    lifts: lifts\n  };\n}\n","module.exports = __webpack_public_path__ + \"static/media/airport_terminal.f7ab7134.png\";","module.exports = __webpack_public_path__ + \"static/media/office.73533f75.png\";"],"sourceRoot":""}